const n=JSON.parse(`{"key":"v-56c756d0","path":"/zh/posts/javascript/%E6%89%8B%E5%86%99%E9%A2%98/%E6%A8%A1%E6%8B%9Fnew%E5%85%B3%E9%94%AE%E5%AD%97/","title":"模拟实现new关键字功能","lang":"zh-CN","frontmatter":{"description":"模拟实现new关键字功能 在js中new关键字主要做了： 首先创建一个空对象，这个对象会作为执行new构造函数之后返回的对象实例， 将创建的空对象原型（__proto__）指向构造函数的prototype属性，同时将这个空对象赋值给构造函数内部的this，并执行构造函数逻辑，根据构造函数的执行逻辑，返回初始创建的对象或构造函数的显式返回值。 /* * File Created: Tuesday, 14th March 2023 5:02:13 pm * Author: hotsuitor (hotsuitor@qq.com) * ----- * Last Modified: Tuesday, 14th March 2023 5:08:14 pm * Modified By: hotsuitor (hotsuitor@qq.com&gt;) */ function newFn(...args) { const constructor = args.shift() // 获取第一个参数，要new的函数 const obj = Object.create(constructor.prototype) // 创建一个空对象 const result = constructor.apply(obj, args) // 修改this指向空对象，传入参数 return typeof result === 'object' &amp;&amp; result !== null ? result : obj } function Person(name) { this.name = name } let p1 = newFn(Person, 'Lisa') let p2 = newFn(Person, 'Jery') console.log(p1.name) // Lisa console.log(p2.name) // Jery","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog2/zh/posts/javascript/%E6%89%8B%E5%86%99%E9%A2%98/%E6%A8%A1%E6%8B%9Fnew%E5%85%B3%E9%94%AE%E5%AD%97/"}],["meta",{"property":"og:site_name","content":"磨刀霍霍向猪羊"}],["meta",{"property":"og:title","content":"模拟实现new关键字功能"}],["meta",{"property":"og:description","content":"模拟实现new关键字功能 在js中new关键字主要做了： 首先创建一个空对象，这个对象会作为执行new构造函数之后返回的对象实例， 将创建的空对象原型（__proto__）指向构造函数的prototype属性，同时将这个空对象赋值给构造函数内部的this，并执行构造函数逻辑，根据构造函数的执行逻辑，返回初始创建的对象或构造函数的显式返回值。 /* * File Created: Tuesday, 14th March 2023 5:02:13 pm * Author: hotsuitor (hotsuitor@qq.com) * ----- * Last Modified: Tuesday, 14th March 2023 5:08:14 pm * Modified By: hotsuitor (hotsuitor@qq.com&gt;) */ function newFn(...args) { const constructor = args.shift() // 获取第一个参数，要new的函数 const obj = Object.create(constructor.prototype) // 创建一个空对象 const result = constructor.apply(obj, args) // 修改this指向空对象，传入参数 return typeof result === 'object' &amp;&amp; result !== null ? result : obj } function Person(name) { this.name = name } let p1 = newFn(Person, 'Lisa') let p2 = newFn(Person, 'Jery') console.log(p1.name) // Lisa console.log(p2.name) // Jery"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T04:36:56.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T04:36:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模拟实现new关键字功能\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-15T04:36:56.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1678855016000,"updatedTime":1678855016000,"contributors":[{"name":"hotsuitor","email":"hotsuitor@qq.com","commits":1}]},"readingTime":{"minutes":0.79,"words":237},"filePathRelative":"zh/posts/javascript/手写题/模拟new关键字/README.md","localizedDate":"2023年3月15日","excerpt":"<h1> 模拟实现new关键字功能</h1>\\n<p>在js中new关键字主要做了：\\n首先创建一个空对象，这个对象会作为执行new构造函数之后返回的对象实例，\\n将创建的空对象原型（<code>__proto__</code>）指向构造函数的prototype属性，同时将这个空对象赋值给构造函数内部的this，并执行构造函数逻辑，根据构造函数的执行逻辑，返回初始创建的对象或构造函数的显式返回值。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">/*\\n * File Created: Tuesday, 14th March 2023 5:02:13 pm\\n * Author: hotsuitor (hotsuitor@qq.com)\\n * -----\\n * Last Modified: Tuesday, 14th March 2023 5:08:14 pm\\n * Modified By: hotsuitor (hotsuitor@qq.com&gt;)\\n */</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">newFn</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token operator\\">...</span>args</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> constructor <span class=\\"token operator\\">=</span> args<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">shift</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 获取第一个参数，要new的函数</span>\\n  <span class=\\"token keyword\\">const</span> obj <span class=\\"token operator\\">=</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span>constructor<span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 创建一个空对象</span>\\n  <span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 修改this指向空对象，传入参数</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">typeof</span> result <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'object'</span> <span class=\\"token operator\\">&amp;&amp;</span> result <span class=\\"token operator\\">!==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">?</span> result <span class=\\"token operator\\">:</span> obj\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">name</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token keyword\\">let</span> p1 <span class=\\"token operator\\">=</span> <span class=\\"token function\\">newFn</span><span class=\\"token punctuation\\">(</span>Person<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Lisa'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">let</span> p2 <span class=\\"token operator\\">=</span> <span class=\\"token function\\">newFn</span><span class=\\"token punctuation\\">(</span>Person<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Jery'</span><span class=\\"token punctuation\\">)</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>p1<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// Lisa</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>p2<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// Jery</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
