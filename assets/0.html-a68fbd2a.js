import{_ as a,X as e,Y as t,Z as n,$ as s,a0 as p}from"./framework-127c059f.js";const l={},o=n("h2",{id:"二叉树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉树","aria-hidden":"true"},"#"),s(" 二叉树")],-1),c=n("p",null,[s("第一层是1个根节点，最多有2个字节点，分别是左子节点和右子节点，也可以没有字节点的树，第i层最多有 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mrow",null,[n("mi",null,"i"),n("mo",null,"−"),n("mn",null,"1")])])]),n("annotation",{encoding:"application/x-tex"},"2^{i-1}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8247em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8247em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"i"),n("span",{class:"mbin mtight"},"−"),n("span",{class:"mord mtight"},"1")])])])])])])])])])])]),s("个节点。")],-1),i=n("h3",{id:"满二叉树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#满二叉树","aria-hidden":"true"},"#"),s(" 满二叉树")],-1),d=n("p",null,[s("每一层节点都是满的。 一个n层的满二叉树，一共有 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"2"),n("mi",null,"n"),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"2{n}-1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(" 个节点。")],-1),u=p(`<h3 id="完全二叉树" tabindex="-1"><a class="header-anchor" href="#完全二叉树" aria-hidden="true">#</a> 完全二叉树</h3><p>定义：只有最后一层缺失节点，而且缺失的节点都在最后（可以是右边，也可以是左边，一般是缺右边子节点） 一个节点总数为k的完全二叉树，设1号节点为根节点，有一下性质： xxx 数组存储空间需要设置为节点数的4倍</p><h3 id="二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#二叉树的遍历" aria-hidden="true">#</a> 二叉树的遍历</h3><h4 id="bfs-使用队列" tabindex="-1"><a class="header-anchor" href="#bfs-使用队列" aria-hidden="true">#</a> BFS 使用队列</h4><h4 id="dfs-使用栈" tabindex="-1"><a class="header-anchor" href="#dfs-使用栈" aria-hidden="true">#</a> DFS 使用栈</h4><p>前序遍历</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">:</span>Node<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  preorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
  preorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>中序遍历</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">:</span>Node<span class="token punctuation">)</span><span class="token punctuation">:</span>
  inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后序遍历</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">postorder</span><span class="token punctuation">(</span>node<span class="token punctuation">:</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  postorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
  postorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>已知<code>“中序遍历结果+前序遍历结果”</code>或<code>“中序遍历结果+后序遍历结果”</code>，可以确定一颗二叉树。 必须要知道<code>“中序遍历结果”</code>，因为存在前序遍历结果和后序遍历结果都相同的，而实际中序遍历结果不同的二叉树。</p>`,12),r=[o,c,i,d,u];function h(m,k){return e(),t("div",null,r)}const g=a(l,[["render",h],["__file","0.html.vue"]]);export{g as default};
