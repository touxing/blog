const n=JSON.parse('{"key":"v-12147ec8","path":"/posts/algo/%E9%98%9F%E5%88%97/","title":"队列","lang":"zh-CN","frontmatter":{"title":"队列","date":"2020-04-21T00:00:00.000Z","icon":"structure","category":["数据结构"],"tag":["数据结构","队列","Queue"],"description":"队列 /** * 循环队列 */ class QueueCircular { constructor(size) { this.queue = new Array(size); this.size = size; this.head = 0; this.tail = 0; } enqueue(value) { // 队满 if ((this.tail + 1) % this.size === this.head) { return false; } this.queue[this.tail] = value; this.tail = (this.tail + 1) % this.size; return true; } dequeue() { // 队空 if (this.tail === this.head) { return null; } const result = this.queue[this.head]; this.head = (this.head + 1) % this.size; return result; } dequeueAll() { const result = []; while (this.tail !== this.head) { result.push(this.dequeue()); } return result; } } class QueueCircular2 { constructor(size) { this.queue = new Array(size); this.size = size; this.head = 0; this.tail = 0; this.queueSize = 0; // 记录队列入栈数量 } enqueuq(value) { } dequeue() { } } const newQueue = new QueueCircular(5) let count = 0; console.log(`入队序号${count++}: a`, newQueue.enqueue(\\"a\\")); console.log(`入队序号${count++}: b`, newQueue.enqueue(\\"b\\")); console.log(`入队序号${count++}: c`, newQueue.enqueue(\\"c\\")); console.log(`入队序号${count++}: d`, newQueue.enqueue(\\"d\\")); console.log(`入队序号${count++}: e`, newQueue.enqueue(\\"e\\")); console.log(`出队:`, newQueue.dequeue()); console.log(`入队序号${count++}: f`, newQueue.enqueue(\\"f\\")); console.log(`入队序号${count++}: g`, newQueue.enqueue(\\"e\\")); console.log(`出队全部:`, newQueue.dequeueAll());","head":[["meta",{"property":"og:url","content":"https://touxing.github.io/blog/blog/posts/algo/%E9%98%9F%E5%88%97/"}],["meta",{"property":"og:site_name","content":"磨刀霍霍向猪羊"}],["meta",{"property":"og:title","content":"队列"}],["meta",{"property":"og:description","content":"队列 /** * 循环队列 */ class QueueCircular { constructor(size) { this.queue = new Array(size); this.size = size; this.head = 0; this.tail = 0; } enqueue(value) { // 队满 if ((this.tail + 1) % this.size === this.head) { return false; } this.queue[this.tail] = value; this.tail = (this.tail + 1) % this.size; return true; } dequeue() { // 队空 if (this.tail === this.head) { return null; } const result = this.queue[this.head]; this.head = (this.head + 1) % this.size; return result; } dequeueAll() { const result = []; while (this.tail !== this.head) { result.push(this.dequeue()); } return result; } } class QueueCircular2 { constructor(size) { this.queue = new Array(size); this.size = size; this.head = 0; this.tail = 0; this.queueSize = 0; // 记录队列入栈数量 } enqueuq(value) { } dequeue() { } } const newQueue = new QueueCircular(5) let count = 0; console.log(`入队序号${count++}: a`, newQueue.enqueue(\\"a\\")); console.log(`入队序号${count++}: b`, newQueue.enqueue(\\"b\\")); console.log(`入队序号${count++}: c`, newQueue.enqueue(\\"c\\")); console.log(`入队序号${count++}: d`, newQueue.enqueue(\\"d\\")); console.log(`入队序号${count++}: e`, newQueue.enqueue(\\"e\\")); console.log(`出队:`, newQueue.dequeue()); console.log(`入队序号${count++}: f`, newQueue.enqueue(\\"f\\")); console.log(`入队序号${count++}: g`, newQueue.enqueue(\\"e\\")); console.log(`出队全部:`, newQueue.dequeueAll());"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T12:09:28.000Z"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"队列"}],["meta",{"property":"article:tag","content":"Queue"}],["meta",{"property":"article:published_time","content":"2020-04-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T12:09:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"队列\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-04-21T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-15T12:09:28.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1678882168000,"updatedTime":1678882168000,"contributors":[{"name":"hotsuitor","email":"hotsuitor@qq.com","commits":1}]},"readingTime":{"minutes":0.11,"words":33},"filePathRelative":"posts/algo/队列/README.md","localizedDate":"2020年4月21日","excerpt":"<h1> 队列</h1>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token doc-comment comment\\">/**\\n * 循环队列\\n */</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">QueueCircular</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">size</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>queue <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Array</span><span class=\\"token punctuation\\">(</span>size<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size <span class=\\"token operator\\">=</span> size<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token function\\">enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 队满</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">%</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>queue<span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">%</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token function\\">dequeue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 队空</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>queue<span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">%</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token function\\">dequeueAll</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail <span class=\\"token operator\\">!==</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      result<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dequeue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">QueueCircular2</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">size</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>queue <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Array</span><span class=\\"token punctuation\\">(</span>size<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size <span class=\\"token operator\\">=</span> size<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>queueSize <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 记录队列入栈数量</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">enqueuq</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">dequeue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">const</span> newQueue <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">QueueCircular</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">let</span> count <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">入队序号</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>count<span class=\\"token operator\\">++</span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">: a</span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">,</span> newQueue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"a\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">入队序号</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>count<span class=\\"token operator\\">++</span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">: b</span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">,</span> newQueue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"b\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">入队序号</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>count<span class=\\"token operator\\">++</span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">: c</span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">,</span> newQueue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"c\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">入队序号</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>count<span class=\\"token operator\\">++</span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">: d</span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">,</span> newQueue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"d\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">入队序号</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>count<span class=\\"token operator\\">++</span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">: e</span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">,</span> newQueue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"e\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">出队:</span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">,</span> newQueue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dequeue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">入队序号</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>count<span class=\\"token operator\\">++</span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">: f</span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">,</span> newQueue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"f\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">入队序号</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>count<span class=\\"token operator\\">++</span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">: g</span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">,</span> newQueue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"e\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">出队全部:</span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">,</span> newQueue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dequeueAll</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
