const e=JSON.parse('{"key":"v-f5bcdaf4","path":"/posts/javascript/EventLoop/1.html","title":"事件循环机制","lang":"zh-CN","frontmatter":{"title":"事件循环机制","date":"2023-03-20T00:00:00.000Z","icon":"cycle","category":["javascript"],"tag":["EventLoop","事件循环"],"description":"Event Loop(事件循环) 它是一个在 js 引擎在等待任务、执行任务和进入休眠状态等待更多任务这几个状态之间转换的无限循环 js是单线程执行 执行过程： 预编译阶段； 执行阶段（自上而下，顺序执行） 预编译阶段： 进行变量和函数的声明相关操作 执行阶段： 自上而下，顺序执行 遇到宏任务，加入宏任务队列， 继续往下执行，遇到微任务，加入微任务队列， 当前 js stack 顺序执行完，等待微观任务执行， 执行 microtasks 队列的头任务，按顺序出队列继续执行， 如果执行完当前微任务，遇到新的 microtasks，继续加入 microtasks queue，等待微任务队列执行完毕。 开始执行宏任务队列，如果遇到 microtasks，跳到步骤1，重复循环。 所有宏任务队列执行完毕，进入 js引擎 等待任务状态。","head":[["meta",{"property":"og:url","content":"https://touxing.github.io/blog/blog/posts/javascript/EventLoop/1.html"}],["meta",{"property":"og:site_name","content":"磨刀霍霍向猪羊"}],["meta",{"property":"og:title","content":"事件循环机制"}],["meta",{"property":"og:description","content":"Event Loop(事件循环) 它是一个在 js 引擎在等待任务、执行任务和进入休眠状态等待更多任务这几个状态之间转换的无限循环 js是单线程执行 执行过程： 预编译阶段； 执行阶段（自上而下，顺序执行） 预编译阶段： 进行变量和函数的声明相关操作 执行阶段： 自上而下，顺序执行 遇到宏任务，加入宏任务队列， 继续往下执行，遇到微任务，加入微任务队列， 当前 js stack 顺序执行完，等待微观任务执行， 执行 microtasks 队列的头任务，按顺序出队列继续执行， 如果执行完当前微任务，遇到新的 microtasks，继续加入 microtasks queue，等待微任务队列执行完毕。 开始执行宏任务队列，如果遇到 microtasks，跳到步骤1，重复循环。 所有宏任务队列执行完毕，进入 js引擎 等待任务状态。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T10:34:30.000Z"}],["meta",{"property":"article:tag","content":"EventLoop"}],["meta",{"property":"article:tag","content":"事件循环"}],["meta",{"property":"article:published_time","content":"2023-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T10:34:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事件循环机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-22T10:34:30.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"createdTime":1679481270000,"updatedTime":1679481270000,"contributors":[{"name":"hotsuitor","email":"hotsuitor@qq.com","commits":1}]},"readingTime":{"minutes":1.09,"words":326},"filePathRelative":"posts/javascript/EventLoop/1.md","localizedDate":"2023年3月20日","excerpt":"<h1> Event Loop(事件循环)</h1>\\n<blockquote>\\n<p>它是一个在 <code>js 引擎</code>在<code>等待任务</code>、<code>执行任务</code>和<code>进入休眠状态等待更多任务</code>这几个状态之间转换的无限循环</p>\\n</blockquote>\\n<p>js是单线程执行</p>\\n<p>执行过程：</p>\\n<ol>\\n<li>预编译阶段；</li>\\n<li>执行阶段（自上而下，顺序执行）</li>\\n</ol>\\n<p>预编译阶段：\\n进行变量和函数的声明相关操作</p>\\n<p>执行阶段：</p>\\n<ol>\\n<li>自上而下，顺序执行</li>\\n<li>遇到宏任务，加入宏任务队列，</li>\\n<li>继续往下执行，遇到微任务，加入微任务队列，</li>\\n<li>当前 <code>js stack</code> 顺序执行完，等待微观任务执行，</li>\\n<li>执行 <code>microtasks</code> 队列的头任务，按顺序出队列继续执行，</li>\\n<li>如果执行完当前微任务，遇到新的 <code>microtasks</code>，继续加入 <code>microtasks queue</code>，等待微任务队列执行完毕。</li>\\n<li>开始执行宏任务队列，如果遇到 <code>microtasks</code>，跳到步骤1，重复循环。</li>\\n<li>所有宏任务队列执行完毕，进入 <code>js引擎</code> 等待任务状态。</li>\\n</ol>","autoDesc":true}');export{e as data};
