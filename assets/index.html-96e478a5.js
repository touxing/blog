import{_ as n,X as s,Y as a,a0 as e}from"./framework-441f7d77.js";const t={},p=e(`<h1 id="模块模式" tabindex="-1"><a class="header-anchor" href="#模块模式" aria-hidden="true">#</a> 模块模式</h1><p><strong>命名空间</strong> 命名空间模式是一个简单的模拟模块的方法，即创建一个全局对象，然后将变量和方法添加到这个全局对象中，这个全局对象是作为命名空间一样的角色。</p><p><strong>模块模式</strong> 除了命名空间模式，也可以使用闭包的特性来模拟实现私有成员的功能来提升安全性，这里可以通过 IIFE 快速创建一个闭包，将要隐藏的变量和方法放在闭包中，这就是模块模式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> privateProp <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>      	<span class="token comment">// 私有变量</span>
    <span class="token keyword">var</span> <span class="token function-variable function">privateMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 私有方法</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>privateProp<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">publicProp</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>              <span class="token comment">// 公有变量</span>
        <span class="token function-variable function">publicMethod</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 共有方法</span>
            privateProp <span class="token operator">=</span> prop
            <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

myModule<span class="token punctuation">.</span><span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token string">&#39;new prop&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出：new prop</span>
myModule<span class="token punctuation">.</span>privateProp              <span class="token comment">// Uncaught TypeError: myModule.privateMethod is not a function</span>
myModule<span class="token punctuation">.</span>privateProp              <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6-module" tabindex="-1"><a class="header-anchor" href="#es6-module" aria-hidden="true">#</a> ES6 module</h2><ul><li><code>export</code></li><li><code>import</code></li></ul>`,6),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","index.html.vue"]]);export{r as default};
