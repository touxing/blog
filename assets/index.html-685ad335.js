const t=JSON.parse('{"key":"v-0d986d48","path":"/zh/posts/javascript/08%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/","title":"工厂模式","lang":"zh-CN","frontmatter":{"date":"2020-11-23T00:00:00.000Z","category":["设计模式","工厂模式"],"tag":["工厂模式","抽象工厂"],"description":"工厂模式 工厂模式 （Factory Pattern），根据不同的输入返回不同类的实例，一般用来创建同一类对象。工厂方式的主要思想是将对象的创建与对象的实现分离 抽象工厂 抽象工厂 （Abstract Factory）：通过对类的工厂抽象使其业务用于对产品类簇的创建，而不是负责创建某一类产品的实例。关键在于使用抽象类制定了实例的结构，调用者直接面向实例的结构编程，从实例的具体实现中解耦。 工厂模式，顾名思义，就相当于一间工厂，工厂可以添加不同的模具，制造不同系列的产品，比如生产飞机，大炮。 抽象工厂，顾名思义，定义的是抽象的概念，没有定义如何实现。比如沈飞工厂生产飞机，定义抽象类“飞机”，具体实现，可以生产容量较大的C919客机，可以生产歼-20战斗机，B-20轰炸机。具体型号的飞机是实现，它们都符合 “飞机” 这个抽象类。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/javascript/08%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"}],["meta",{"property":"og:site_name","content":"磨刀霍霍向猪羊"}],["meta",{"property":"og:title","content":"工厂模式"}],["meta",{"property":"og:description","content":"工厂模式 工厂模式 （Factory Pattern），根据不同的输入返回不同类的实例，一般用来创建同一类对象。工厂方式的主要思想是将对象的创建与对象的实现分离 抽象工厂 抽象工厂 （Abstract Factory）：通过对类的工厂抽象使其业务用于对产品类簇的创建，而不是负责创建某一类产品的实例。关键在于使用抽象类制定了实例的结构，调用者直接面向实例的结构编程，从实例的具体实现中解耦。 工厂模式，顾名思义，就相当于一间工厂，工厂可以添加不同的模具，制造不同系列的产品，比如生产飞机，大炮。 抽象工厂，顾名思义，定义的是抽象的概念，没有定义如何实现。比如沈飞工厂生产飞机，定义抽象类“飞机”，具体实现，可以生产容量较大的C919客机，可以生产歼-20战斗机，B-20轰炸机。具体型号的飞机是实现，它们都符合 “飞机” 这个抽象类。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T04:36:56.000Z"}],["meta",{"property":"article:tag","content":"工厂模式"}],["meta",{"property":"article:tag","content":"抽象工厂"}],["meta",{"property":"article:published_time","content":"2020-11-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T04:36:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-11-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-15T04:36:56.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"抽象工厂","slug":"抽象工厂","link":"#抽象工厂","children":[]}],"git":{"createdTime":1678855016000,"updatedTime":1678855016000,"contributors":[{"name":"hotsuitor","email":"hotsuitor@qq.com","commits":1}]},"readingTime":{"minutes":2.68,"words":804},"filePathRelative":"zh/posts/javascript/08工厂模式/README.md","localizedDate":"2020年11月23日","excerpt":"<h1> 工厂模式</h1>\\n<p>工厂模式 （Factory Pattern），根据不同的输入返回不同类的实例，一般用来创建同一类对象。工厂方式的主要思想是将对象的创建与对象的实现分离</p>\\n<h2> 抽象工厂</h2>\\n<p>抽象工厂 （Abstract Factory）：通过对类的工厂抽象使其业务用于对产品类簇的创建，而不是负责创建某一类产品的实例。关键在于使用抽象类制定了实例的结构，调用者直接面向实例的结构编程，从实例的具体实现中解耦。</p>\\n<p>工厂模式，顾名思义，就相当于一间工厂，工厂可以添加不同的模具，制造不同系列的产品，比如生产飞机，大炮。</p>\\n<p>抽象工厂，顾名思义，定义的是抽象的概念，没有定义如何实现。比如沈飞工厂生产飞机，定义抽象类“飞机”，具体实现，可以生产容量较大的C919客机，可以生产歼-20战斗机，B-20轰炸机。具体型号的飞机是实现，它们都符合 “飞机” 这个抽象类。</p>","autoDesc":true}');export{t as data};
