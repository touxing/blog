const n=JSON.parse('{"key":"v-118bfcfe","path":"/zh/posts/javascript/07%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","title":"单例模式","lang":"zh-CN","frontmatter":{"date":"2020-11-23T00:00:00.000Z","category":["设计模式"],"tag":["单例模式"],"description":"单例模式 也叫单体模式，一个类只实例化一次 优点： 节约系统资源， 缺点： 不易扩展，违反单一职责原则 适用场景 当一个类的实例化过程消耗的资源过多，可以使用单例模式来避免性能浪费； 当项目中需要一个公共的状态，那么需要使用单例模式来保证访问一致性； 代码实现： function Singleton() { // 如果已存在实例，则返回单例 if (Singleton._instance) return Singleton._instance; Singleton._instance = this; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/zh/posts/javascript/07%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"}],["meta",{"property":"og:site_name","content":"磨刀霍霍向猪羊"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"单例模式 也叫单体模式，一个类只实例化一次 优点： 节约系统资源， 缺点： 不易扩展，违反单一职责原则 适用场景 当一个类的实例化过程消耗的资源过多，可以使用单例模式来避免性能浪费； 当项目中需要一个公共的状态，那么需要使用单例模式来保证访问一致性； 代码实现： function Singleton() { // 如果已存在实例，则返回单例 if (Singleton._instance) return Singleton._instance; Singleton._instance = this; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T04:36:56.000Z"}],["meta",{"property":"article:tag","content":"单例模式"}],["meta",{"property":"article:published_time","content":"2020-11-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T04:36:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单例模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-11-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-15T04:36:56.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]}],"git":{"createdTime":1678855016000,"updatedTime":1678855016000,"contributors":[{"name":"hotsuitor","email":"hotsuitor@qq.com","commits":1}]},"readingTime":{"minutes":0.64,"words":192},"filePathRelative":"zh/posts/javascript/07单例模式/README.md","localizedDate":"2020年11月23日","excerpt":"<h1> 单例模式</h1>\\n<p>也叫单体模式，一个类只实例化一次</p>\\n<p>优点：\\n节约系统资源，\\n缺点：\\n不易扩展，违反单一职责原则</p>\\n<h3> 适用场景</h3>\\n<p>当一个类的实例化过程消耗的资源过多，可以使用单例模式来避免性能浪费；\\n当项目中需要一个公共的状态，那么需要使用单例模式来保证访问一致性；</p>\\n<p>代码实现：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Singleton</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 如果已存在实例，则返回单例</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>Singleton<span class=\\"token punctuation\\">.</span>_instance<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> Singleton<span class=\\"token punctuation\\">.</span>_instance<span class=\\"token punctuation\\">;</span>\\n  Singleton<span class=\\"token punctuation\\">.</span>_instance <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
