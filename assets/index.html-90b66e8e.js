const n=JSON.parse(`{"key":"v-2927fddc","path":"/posts/javascript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/27%E6%A8%A1%E5%9D%97%E6%A8%A1%E5%BC%8F/","title":"模块模式","lang":"zh-CN","frontmatter":{"date":"2020-11-23T00:00:00.000Z","category":["设计模式"],"tag":["模块模式"],"description":"模块模式 命名空间 命名空间模式是一个简单的模拟模块的方法，即创建一个全局对象，然后将变量和方法添加到这个全局对象中，这个全局对象是作为命名空间一样的角色。 模块模式 除了命名空间模式，也可以使用闭包的特性来模拟实现私有成员的功能来提升安全性，这里可以通过 IIFE 快速创建一个闭包，将要隐藏的变量和方法放在闭包中，这就是模块模式。 var myModule = (function() { var privateProp = '' \\t// 私有变量 var privateMethod = function() { // 私有方法 console.log(privateProp) } return { publicProp: 'foo', // 公有变量 publicMethod: function(prop) { // 共有方法 privateProp = prop privateMethod() } } })() myModule.publicMethod('new prop') // 输出：new prop myModule.privateProp // Uncaught TypeError: myModule.privateMethod is not a function myModule.privateProp // undefined","head":[["meta",{"property":"og:url","content":"https://touxing.github.io/blog/blog/posts/javascript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/27%E6%A8%A1%E5%9D%97%E6%A8%A1%E5%BC%8F/"}],["meta",{"property":"og:site_name","content":"磨刀霍霍向猪羊"}],["meta",{"property":"og:title","content":"模块模式"}],["meta",{"property":"og:description","content":"模块模式 命名空间 命名空间模式是一个简单的模拟模块的方法，即创建一个全局对象，然后将变量和方法添加到这个全局对象中，这个全局对象是作为命名空间一样的角色。 模块模式 除了命名空间模式，也可以使用闭包的特性来模拟实现私有成员的功能来提升安全性，这里可以通过 IIFE 快速创建一个闭包，将要隐藏的变量和方法放在闭包中，这就是模块模式。 var myModule = (function() { var privateProp = '' \\t// 私有变量 var privateMethod = function() { // 私有方法 console.log(privateProp) } return { publicProp: 'foo', // 公有变量 publicMethod: function(prop) { // 共有方法 privateProp = prop privateMethod() } } })() myModule.publicMethod('new prop') // 输出：new prop myModule.privateProp // Uncaught TypeError: myModule.privateMethod is not a function myModule.privateProp // undefined"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T10:34:30.000Z"}],["meta",{"property":"article:tag","content":"模块模式"}],["meta",{"property":"article:published_time","content":"2020-11-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T10:34:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模块模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-11-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-22T10:34:30.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"ES6 module","slug":"es6-module","link":"#es6-module","children":[]}],"git":{"createdTime":1679481270000,"updatedTime":1679481270000,"contributors":[{"name":"hotsuitor","email":"hotsuitor@qq.com","commits":1}]},"readingTime":{"minutes":0.74,"words":221},"filePathRelative":"posts/javascript/设计模式/27模块模式/README.md","localizedDate":"2020年11月23日","excerpt":"<h1> 模块模式</h1>\\n<p><strong>命名空间</strong>\\n命名空间模式是一个简单的模拟模块的方法，即创建一个全局对象，然后将变量和方法添加到这个全局对象中，这个全局对象是作为命名空间一样的角色。</p>\\n<p><strong>模块模式</strong>\\n除了命名空间模式，也可以使用闭包的特性来模拟实现私有成员的功能来提升安全性，这里可以通过 IIFE 快速创建一个闭包，将要隐藏的变量和方法放在闭包中，这就是模块模式。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> myModule <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">var</span> privateProp <span class=\\"token operator\\">=</span> <span class=\\"token string\\">''</span>      \\t<span class=\\"token comment\\">// 私有变量</span>\\n    <span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">privateMethod</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// 私有方法</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>privateProp<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token literal-property property\\">publicProp</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span>              <span class=\\"token comment\\">// 公有变量</span>\\n        <span class=\\"token function-variable function\\">publicMethod</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">prop</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  <span class=\\"token comment\\">// 共有方法</span>\\n            privateProp <span class=\\"token operator\\">=</span> prop\\n            <span class=\\"token function\\">privateMethod</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\nmyModule<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">publicMethod</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'new prop'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 输出：new prop</span>\\nmyModule<span class=\\"token punctuation\\">.</span>privateProp              <span class=\\"token comment\\">// Uncaught TypeError: myModule.privateMethod is not a function</span>\\nmyModule<span class=\\"token punctuation\\">.</span>privateProp              <span class=\\"token comment\\">// undefined</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
