import{_ as i,X as l,Y as c,Z as e,$ as n,a0 as a,a1 as t,C as o}from"./framework-2b07d456.js";const p={},r=e("h1",{id:"kubernetes",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#kubernetes","aria-hidden":"true"},"#"),n(" kubernetes")],-1),d=e("h2",{id:"安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),n(" 安装")],-1),u=e("p",null,"有条件物理机安装者，直接看kebernetes官网安装教程， 不过可以先在虚拟机安装熟悉流程，节约时间",-1),m={href:"https://kubernetes.io/docs/tasks/tools/install-minikube/",target:"_blank",rel:"noopener noreferrer"},k=t(`<h3 id="准备" tabindex="-1"><a class="header-anchor" href="#准备" aria-hidden="true">#</a> 准备：</h3><ul><li>VMWare 虚拟机软件</li><li>CentOS 7 IOS 文件</li><li>配置尽量高一点的电脑</li><li>有网络，可以访问Google(非必要，遇到疑难杂症帮助很大)</li></ul><ol><li>创建VMWare虚拟机（virtualBox也可以），安装 <code>CentOS</code> 系统</li><li>安装完 CentOS 系统 可以做个快照备份，系统搞崩了不用重新安装，直接快照还原</li><li>根据官网安装 <code>minikube</code></li></ol><h2 id="启动-minikube" tabindex="-1"><a class="header-anchor" href="#启动-minikube" aria-hidden="true">#</a> 启动 minikube</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>minikube start <span class="token comment"># --vm-driver=none 指定 VM 驱动程序 默认 none 在当前主机运行k8s组件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动过程中遇到的问题，国内网络无法拉取镜像，设置国内镜像地址</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>minikube start --image-mirror-country<span class="token operator">=</span>cn --iso-url<span class="token operator">=</span>https://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/iso/minikube-v1.6.0.iso --registry-mirror<span class="token operator">=</span>https://dockerhub.azk8s.cn  --image-repository<span class="token operator">=</span>registry.cn-hangzhou.aliyuncs.com/google_containers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="安装dashboard" tabindex="-1"><a class="header-anchor" href="#安装dashboard" aria-hidden="true">#</a> 安装dashboard</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>minikube dashboard
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(base) ➜  ~ * Verifying dashboard health ...
* Launching proxy ...
* Verifying proxy health ...
http://127.0.0.1:41730/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动后，输出一个url，是访问浏览器访问<code>dashboard</code>的地址，但只能本地访问，要设置代理才能局域网或者公网访问, 详情查看 <code>kubectl proxy --help</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl proxy <span class="token parameter variable">--address</span><span class="token operator">=</span><span class="token string">&#39;0.0.0.0&#39;</span> --accept-hosts<span class="token operator">=</span><span class="token string">&quot;^*$&quot;</span> <span class="token comment"># 允许所有地址访问</span>
<span class="token comment"># Starting to serve on [::]:8001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在宿主主机浏览器中访问 <code>http://&lt;master_ip&gt;:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/</code></p>`,13),v={href:"https://github.com/kubernetes/minikube/issues/5860",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/kubernetes/minikube/issues/4411",target:"_blank",rel:"noopener noreferrer"},h=e("h2",{id:"部署第一个应用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#部署第一个应用","aria-hidden":"true"},"#"),n(" 部署第一个应用")],-1),g={href:"https://kubernetes.io/zh/docs/tutorials/hello-minikube/",target:"_blank",rel:"noopener noreferrer"},y=e("p",null,"本地 minikube 环境 部署应用",-1),f={href:"https://segmentfault.com/a/1190000014116698",target:"_blank",rel:"noopener noreferrer"},_=e("hr",null,null,-1),x={href:"https://zhuanlan.zhihu.com/p/39937913",target:"_blank",rel:"noopener noreferrer"},P=t(`<h3 id="利用配置文件创建-pod-deployment-service" tabindex="-1"><a class="header-anchor" href="#利用配置文件创建-pod-deployment-service" aria-hidden="true">#</a> 利用配置文件创建 Pod Deployment Service</h3><p>Pod 是 Kubernetes 应用程序的基本执行单元，即它是 Kubernetes 对象模型中创建或部署的最小和最简单的单元。Pod 表示在 集群 上运行的进程。</p><p>Pod 是 Kubernetes 抽象出来的，表示一组一个或多个应用程序容器（如 Docker 或 rkt ），以及这些容器的一些共享资源。这些资源包括:</p><ul><li>共享存储，当作卷</li><li>网络，作为唯一的集群 IP 地址</li><li>有关每个容器如何运行的信息，例如容器映像版本或要使用的特定端口。</li></ul><p>Kubernetes Service 定义了这样一种抽象：逻辑上的一组 Pod，一种可以访问它们的策略 —— 通常称为微服务。 这一组 Pod 能够被 Service 访问到，通常是通过 selector （查看下面了解，为什么你可能需要没有 selector 的 Service）实现的。</p><p>Service 可以理解成提供对外访问的服务（接口）</p><p>Deployment 一个为 <code>Pod</code>和<code>ReplicaSets</code> 提供声明式更新的调度器。用于管理 Pod。</p><h4 id="配置文件例子" tabindex="-1"><a class="header-anchor" href="#配置文件例子" aria-hidden="true">#</a> 配置文件例子</h4><blockquote><p>kubectl get 查看列表 kubectl describe 查看详情 kubectl logs 查看日志 kubectl exec 执行容器命令</p></blockquote><p>本地镜像文件 <code>sh5dev:v1</code></p><h5 id="配置-deployment-vim-deployment-sh5-dev-yml" tabindex="-1"><a class="header-anchor" href="#配置-deployment-vim-deployment-sh5-dev-yml" aria-hidden="true">#</a> 配置 Deployment <code>vim deployment-sh5-dev.yml</code></h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1 <span class="token comment"># for versions before 1.9.0 use apps/v1beta2</span>
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment <span class="token comment"># 服务类型</span>
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> dp<span class="token punctuation">-</span>sappdev
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span> <span class="token comment"># 选择要管理的 Pod</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> s<span class="token punctuation">-</span>h5dev <span class="token comment"># 匹配要管理的 Pod 的标签，没有匹配到会创建一个新的 Pod</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># tells deployment to run 2 pods matching the template</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token comment"># 模板</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> s<span class="token punctuation">-</span>h5dev
    <span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment"># 指定运行的容器，和配置</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> sh5app<span class="token punctuation">-</span>container
        <span class="token key atrule">image</span><span class="token punctuation">:</span> sh5dev<span class="token punctuation">:</span>v1 <span class="token comment"># 容器启动用的镜像</span>
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8009</span> <span class="token comment"># 对外暴露的端口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 Deployment <code>kubectl create -f deployment-sh5-dev.yml</code> 创建的Deployment需要运行 <code>kubectl run &lt;NAME&gt; </code> 这里的 <code>NAME=dp-sappdev</code> 直接运行 <code>kubectl apply -f deployment-sh5-dev.yml</code> 查看 <code>kubectl get deployment</code></p><h5 id="配置-pod-vim-pod-sh5-yml" tabindex="-1"><a class="header-anchor" href="#配置-pod-vim-pod-sh5-yml" aria-hidden="true">#</a> 配置 Pod <code>vim pod-sh5.yml</code></h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> sh5
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> s<span class="token punctuation">-</span>h5<span class="token punctuation">-</span>app
<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment"># 指定运行的容器</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> s<span class="token punctuation">-</span>h5<span class="token punctuation">-</span>pod
      <span class="token key atrule">image</span><span class="token punctuation">:</span> sh5dev<span class="token punctuation">:</span>v1
      <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8009</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 Pod <code>kubectl apply -f pod-sh5.yml</code> 查看 <code>kubectl get pods</code></p><h5 id="配置-service-vim" tabindex="-1"><a class="header-anchor" href="#配置-service-vim" aria-hidden="true">#</a> 配置 Service <code>vim </code></h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>apiVersion: v1
kind: Service
metadata:
  name: sh5dev-svc
  labels:
    app: sh5dev-svc
spec:
  type: NodePort
  ports:
    - port: 8009
      # nodePort: 30051 # 指定对外暴露的端口，不指定会内部分配 \`minikube service sh5dev-svc\` 查看访问url
  selector: # 指定对外暴露的 Pod 的 labels{key,value} 的形式，例子匹配 Pod 的labels 是 app:s-h5dev
    app: s-h5dev

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 Service <code>kubectl apply -f pod-sh5.yml</code> 查看 <code>kubectl get services</code></p><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h3>`,20),S={href:"https://mp.weixin.qq.com/s?__biz=MjM5MzU5NDYwNA==&mid=2247485698&idx=2&sn=5b2f74a8f0f1d9e383e34da2964e35a3&chksm=a695e48191e26d97d33573cea4cd9d2a1cef463785acd7c7b0ee889e4556839bf9ca5ffdd9f7&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/jenkinsci/kubernetes-plugin",target:"_blank",rel:"noopener noreferrer"},D=t(`<p>上面提供了jenkins在kubernetes中容器化的部署方式，以及yaml文件，现在直接 git clone 下来。在部署好k8s平台上安装 jenkins</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/jenkinsci/kubernetes-plugin.git
<span class="token builtin class-name">cd</span> kubernetes-plugin
<span class="token comment"># 配置 minikube refe: https://github.com/jenkinsci/kubernetes-plugin#configuration-on-minikube</span>
<span class="token comment"># 客户端证书需要转换为PKCS(公共秘钥)</span>
openssl pkcs12 <span class="token parameter variable">-export</span> <span class="token parameter variable">-out</span> ~/.minikube/minikube.pfx <span class="token parameter variable">-inkey</span> ~/.minikube/apiserver.key <span class="token parameter variable">-in</span> ~/.minikube/apiserver.crt <span class="token parameter variable">-certfile</span> ~/.minikube/ca.crt <span class="token parameter variable">-passout</span> pass:secret
<span class="token comment"># 检验 认证是否生效</span>
<span class="token function">curl</span> <span class="token parameter variable">--cacert</span> ~/.minikube/ca.crt <span class="token parameter variable">--cert</span> ~/.minikube/minikube.pfx:secret --cert-type P12 https://<span class="token variable"><span class="token variable">$(</span>minikube <span class="token function">ip</span><span class="token variable">)</span></span>:8443
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 minikube 中运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>minikube start
<span class="token comment"># 创建命名空间和Service</span>
kubectl create namespace kubernetes-plugin
kubectl config set-context <span class="token variable"><span class="token variable">$(</span>kubectl config current-context<span class="token variable">)</span></span> <span class="token parameter variable">--namespace</span><span class="token operator">=</span>kubernetes-plugin
kubectl create <span class="token parameter variable">-f</span> src/main/kubernetes/service-account.yml
kubectl create <span class="token parameter variable">-f</span> src/main/kubernetes/jenkins.yml

<span class="token comment"># 获取访问url</span>
minikube <span class="token function">service</span> jenkins <span class="token parameter variable">--namespace</span> kubernetes-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在dashboard中访问，会看到 Pods 的状态是 <code>Failed</code> , 查看日志排查错误，如果日志正常，只需要访问 <code>http://&lt;master_ip&gt;:8080</code> 安装 Jenkins。如果不正常，需要根据日志 Google 排查问题。</p>`,5);function j(N,q){const s=o("ExternalLinkIcon");return l(),c("div",null,[r,d,u,e("p",null,[n("本地学习可以用虚拟机安装 minikube 版本 "),e("a",m,[n("官网"),a(s)]),n(" 简单快捷，我们的目的是了解安装，可以安装使用，而不是在安装过程中消耗太多时间")]),k,e("p",null,[n("遇到的问题： 安装 dashboard 失败问题参考："),e("a",v,[n("https://github.com/kubernetes/minikube/issues/5860"),a(s)])]),e("p",null,[n("启动 dashboard 失败问题参考："),e("a",b,[n("https://github.com/kubernetes/minikube/issues/4411"),a(s)])]),h,e("blockquote",null,[e("p",null,[n("官网的"),e("a",g,[n("Hello World"),a(s)]),n(" 提供在线 kubernetes 环境")])]),y,e("blockquote",null,[e("p",null,[n("参考："),e("a",f,[n("https://segmentfault.com/a/1190000014116698"),a(s)]),n(" 把命令操作写成 yml 配置文件，方便使用")])]),_,e("p",null,[n("参考资料： "),e("a",x,[n("Docker 和 Kubernetes：给程序员的快速指南"),a(s)])]),P,e("p",null,[e("a",S,[n("5分钟搞定在k8s上部署jenkins，并提供域名访问"),a(s)])]),e("p",null,[n("Github上的一个项目： "),e("a",V,[n("Jenkins plugin to run dynamic agents in a Kubernetes/Docker environment"),a(s)])]),D])}const M=i(p,[["render",j],["__file","k8s.html.vue"]]);export{M as default};
