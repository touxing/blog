const n=JSON.parse('{"key":"v-2ce1bd0c","path":"/posts/algo/13%E7%BA%BF%E6%80%A7%E6%8E%92%E5%BA%8F/","title":"13线性排序","lang":"zh-CN","frontmatter":{"title":"13线性排序","date":"2020-03-10T00:00:00.000Z","icon":"line","category":["算法"],"tag":["算法","algo","线性排序"],"description":"桶排序 把一系列数据放到 n 个有序划分的桶中， 在各个桶中分别排序（快排 or 插排） 依次取出桶中数据，排序完成 适用场景，大量数据排序且数据浮动不大(数据方差不大)，比如：给高考100万考生按分数排名 用了空间换时间的思想 代码实现 /** * 桶排序 * @param {Array} arr * @param {Number} bucketSize */ function bucketSort(arr, bucketSize = 5) { if (arr.length &lt; 2) return arr; const buckets = createBucket(arr, bucketSize); return sortBuckets(buckets); } /** * @description: * @param {Array} arr=待排序数据 * @param {Number} bucketSize=桶大小 * @return: */ function createBucket(arr, bucketSize) { let minValue = arr[0]; let maxValue = arr[0]; // 找出数据中最大值和最小值，根据桶的大小用来划分桶的个数和区间 for (let i = 1; i &lt; arr.length; i++) { if (arr[i] &lt; minValue) { minValue = arr[i]; } else if (arr[i] &gt; maxValue) { maxValue = arr[i]; } } // 桶的个数 const bucketCount = Math.ceil((maxValue - minValue) / bucketSize); // 创建桶，用二维数组来存储 const buckets = []; for (let i = 0; i &lt;= bucketCount; i++) { buckets[i] = []; } // 计算把数据放到哪个桶 for (let i = 0; i &lt; arr.length; i++) { let bucketIndex = Math.floor((arr[i] - minValue) / bucketSize); buckets[bucketIndex].push(arr[i]); } return buckets; } /** * @description: 排序桶 * @param {Array} buckets * @return: */ function sortBuckets(buckets) { const sortArray = []; for (let i = 0; i &lt; buckets.length; i++) { if (buckets[i] != null) { const sortBucket = insertionSort(buckets[i]); sortArray.push(sortBucket); } } return sortArray; } /** * @description: 插入排序 * @param {Array} arr * @return: 排好序的arr */ function insertionSort(arr) { if (arr.length &lt; 2) return arr; for (let i = 1; i &lt; arr.length; i++) { let key = arr[i]; // 第一个元素已排好序，从第二个开始比较插入 let j = i - 1; for (; j &gt;= 0; j--) { if (arr[j] &gt; key) { arr[j + 1] = arr[j]; // 比较，较大者，往后移 } else { break; } } arr[j + 1] = key; // 插入对应的位置 } return arr; } // 随机生成1000000个[1,100]区间内的整数 let arr1 = Array.from( { length: 1000000 }, item =&gt; (item = Math.floor(Math.random() * Math.floor(100) + 1)) ); console.time(\\"timer\\"); // console.log(`排序前的数据:${arr1}, 排序后的数据:${bucketSort(arr1, 5)}`); bucketSort(arr1, 1); // 桶越小，排序越快，即桶个数越多，排序越快 console.timeEnd(\\"timer\\");","head":[["meta",{"property":"og:url","content":"https://touxing.github.io/blog/blog/posts/algo/13%E7%BA%BF%E6%80%A7%E6%8E%92%E5%BA%8F/"}],["meta",{"property":"og:site_name","content":"磨刀霍霍向猪羊"}],["meta",{"property":"og:title","content":"13线性排序"}],["meta",{"property":"og:description","content":"桶排序 把一系列数据放到 n 个有序划分的桶中， 在各个桶中分别排序（快排 or 插排） 依次取出桶中数据，排序完成 适用场景，大量数据排序且数据浮动不大(数据方差不大)，比如：给高考100万考生按分数排名 用了空间换时间的思想 代码实现 /** * 桶排序 * @param {Array} arr * @param {Number} bucketSize */ function bucketSort(arr, bucketSize = 5) { if (arr.length &lt; 2) return arr; const buckets = createBucket(arr, bucketSize); return sortBuckets(buckets); } /** * @description: * @param {Array} arr=待排序数据 * @param {Number} bucketSize=桶大小 * @return: */ function createBucket(arr, bucketSize) { let minValue = arr[0]; let maxValue = arr[0]; // 找出数据中最大值和最小值，根据桶的大小用来划分桶的个数和区间 for (let i = 1; i &lt; arr.length; i++) { if (arr[i] &lt; minValue) { minValue = arr[i]; } else if (arr[i] &gt; maxValue) { maxValue = arr[i]; } } // 桶的个数 const bucketCount = Math.ceil((maxValue - minValue) / bucketSize); // 创建桶，用二维数组来存储 const buckets = []; for (let i = 0; i &lt;= bucketCount; i++) { buckets[i] = []; } // 计算把数据放到哪个桶 for (let i = 0; i &lt; arr.length; i++) { let bucketIndex = Math.floor((arr[i] - minValue) / bucketSize); buckets[bucketIndex].push(arr[i]); } return buckets; } /** * @description: 排序桶 * @param {Array} buckets * @return: */ function sortBuckets(buckets) { const sortArray = []; for (let i = 0; i &lt; buckets.length; i++) { if (buckets[i] != null) { const sortBucket = insertionSort(buckets[i]); sortArray.push(sortBucket); } } return sortArray; } /** * @description: 插入排序 * @param {Array} arr * @return: 排好序的arr */ function insertionSort(arr) { if (arr.length &lt; 2) return arr; for (let i = 1; i &lt; arr.length; i++) { let key = arr[i]; // 第一个元素已排好序，从第二个开始比较插入 let j = i - 1; for (; j &gt;= 0; j--) { if (arr[j] &gt; key) { arr[j + 1] = arr[j]; // 比较，较大者，往后移 } else { break; } } arr[j + 1] = key; // 插入对应的位置 } return arr; } // 随机生成1000000个[1,100]区间内的整数 let arr1 = Array.from( { length: 1000000 }, item =&gt; (item = Math.floor(Math.random() * Math.floor(100) + 1)) ); console.time(\\"timer\\"); // console.log(`排序前的数据:${arr1}, 排序后的数据:${bucketSort(arr1, 5)}`); bucketSort(arr1, 1); // 桶越小，排序越快，即桶个数越多，排序越快 console.timeEnd(\\"timer\\");"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T12:09:28.000Z"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"algo"}],["meta",{"property":"article:tag","content":"线性排序"}],["meta",{"property":"article:published_time","content":"2020-03-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T12:09:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"13线性排序\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-03-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-15T12:09:28.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1678882168000,"updatedTime":1678882168000,"contributors":[{"name":"hotsuitor","email":"hotsuitor@qq.com","commits":1}]},"readingTime":{"minutes":1.61,"words":483},"filePathRelative":"posts/algo/13线性排序/README.md","localizedDate":"2020年3月10日","excerpt":"<h1> 桶排序</h1>\\n<ul>\\n<li>把一系列数据放到 n 个有序划分的桶中，</li>\\n<li>在各个桶中分别排序（快排 or 插排）</li>\\n<li>依次取出桶中数据，排序完成</li>\\n</ul>\\n<p>适用场景，大量数据排序且数据浮动不大(数据方差不大)，比如：给高考100万考生按分数排名</p>\\n<blockquote>\\n<p>用了空间换时间的思想</p>\\n</blockquote>\\n<p>代码实现</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token doc-comment comment\\">/**\\n * 桶排序\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>Array<span class=\\"token punctuation\\">}</span></span> <span class=\\"token parameter\\">arr</span>\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>Number<span class=\\"token punctuation\\">}</span></span> <span class=\\"token parameter\\">bucketSize</span>\\n */</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">bucketSort</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arr<span class=\\"token punctuation\\">,</span> bucketSize <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> arr<span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">const</span> buckets <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createBucket</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">,</span> bucketSize<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">sortBuckets</span><span class=\\"token punctuation\\">(</span>buckets<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@description</span>:\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>Array<span class=\\"token punctuation\\">}</span></span> arr=待排序数据\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>Number<span class=\\"token punctuation\\">}</span></span> bucketSize=桶大小\\n * <span class=\\"token keyword\\">@return</span>:\\n */</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">createBucket</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arr<span class=\\"token punctuation\\">,</span> bucketSize</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> minValue <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> maxValue <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 找出数据中最大值和最小值，根据桶的大小用来划分桶的个数和区间</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> arr<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> minValue<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      minValue <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> maxValue<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      maxValue <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token comment\\">// 桶的个数</span>\\n  <span class=\\"token keyword\\">const</span> bucketCount <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ceil</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>maxValue <span class=\\"token operator\\">-</span> minValue<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> bucketSize<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// 创建桶，用二维数组来存储</span>\\n  <span class=\\"token keyword\\">const</span> buckets <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> bucketCount<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    buckets<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token comment\\">// 计算把数据放到哪个桶</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> arr<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> bucketIndex <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">floor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">-</span> minValue<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> bucketSize<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    buckets<span class=\\"token punctuation\\">[</span>bucketIndex<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> buckets<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@description</span>: 排序桶\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>Array<span class=\\"token punctuation\\">}</span></span>  <span class=\\"token parameter\\">buckets</span>\\n * <span class=\\"token keyword\\">@return</span>:\\n */</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">sortBuckets</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">buckets</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> sortArray <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> buckets<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>buckets<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">const</span> sortBucket <span class=\\"token operator\\">=</span> <span class=\\"token function\\">insertionSort</span><span class=\\"token punctuation\\">(</span>buckets<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      sortArray<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>sortBucket<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> sortArray<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@description</span>: 插入排序\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>Array<span class=\\"token punctuation\\">}</span></span> <span class=\\"token parameter\\">arr</span>\\n * <span class=\\"token keyword\\">@return</span>: 排好序的arr\\n */</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">insertionSort</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arr</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> arr<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> arr<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> key <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 第一个元素已排好序，从第二个开始比较插入</span>\\n    <span class=\\"token keyword\\">let</span> j <span class=\\"token operator\\">=</span> i <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        arr<span class=\\"token punctuation\\">[</span>j <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 比较，较大者，往后移</span>\\n      <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    arr<span class=\\"token punctuation\\">[</span>j <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> key<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 插入对应的位置</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> arr<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 随机生成1000000个[1,100]区间内的整数</span>\\n<span class=\\"token keyword\\">let</span> arr1 <span class=\\"token operator\\">=</span> Array<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">from</span><span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">length</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">1000000</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token parameter\\">item</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">(</span>item <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">floor</span><span class=\\"token punctuation\\">(</span>Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">random</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">floor</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">time</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"timer\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// console.log(`排序前的数据:${arr1}, 排序后的数据:${bucketSort(arr1, 5)}`);</span>\\n<span class=\\"token function\\">bucketSort</span><span class=\\"token punctuation\\">(</span>arr1<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 桶越小，排序越快，即桶个数越多，排序越快</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">timeEnd</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"timer\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
