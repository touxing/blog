import{_ as n,X as s,Y as a,a0 as p}from"./framework-127c059f.js";const t={},e=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 输入：[&#39;0.1.1&#39;, &#39;2.3.3&#39;, &#39;0.302.1&#39;, &#39;4.2&#39;, &#39;4.3.5&#39;, &#39;4.3.4.5&#39;]</span>
<span class="token comment">// 输出： [ &#39;4.3.5&#39;, &#39;4.3.4.5&#39;, &#39;4.2&#39;, &#39;2.3.3&#39;, &#39;0.302.1&#39;, &#39;0.1.1&#39; ]</span>

<span class="token comment">// 实现</span>
<span class="token comment">// 方法1.&quot;大数&quot;加权法</span>
<span class="token comment">// 方法2.循环比较法</span>

<span class="token comment">// const input = [&#39;0.1.1&#39;, &#39;2.3.3&#39;, &#39;0.302.1&#39;, &#39;4.2&#39;, &#39;4.3.5&#39;, &#39;4.3.4.5&#39;]</span>
<span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1.0.1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1.0.0.1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0.2222.1&#39;</span><span class="token punctuation">]</span>

<span class="token comment">// 1.算出每一个值的权重</span>
<span class="token comment">// 2.用sort排序</span>

<span class="token keyword">const</span> maxLen <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>input<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token number">1000</span>
<span class="token comment">// const reducer = (prev, curr, index, arr) =&gt; prev + +curr * Math.pow(p,  maxLen - 1 - index )</span>
<span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prev <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span> <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>  index <span class="token punctuation">)</span>


<span class="token keyword">const</span> <span class="token function-variable function">gen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

input<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">gen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">gen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>

<span class="token comment">//</span>
<span class="token keyword">const</span> input2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;0.1.1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2.3.3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0.302.1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4.2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4.3.5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4.3.4.5&#39;</span><span class="token punctuation">]</span>

input2<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s1 <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">let</span> s2 <span class="token operator">=</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    i<span class="token operator">++</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> s1 <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> s2 <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> arr2<span class="token punctuation">.</span>length <span class="token operator">-</span> arr1<span class="token punctuation">.</span>length
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span> <span class="token keyword">continue</span>

    <span class="token keyword">return</span> s2 <span class="token operator">-</span> s1
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// console.log(input2);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","1.html.vue"]]);export{r as default};
