import{_ as n,X as i,Y as t,Z as a,$ as e,a1 as c,a0 as d,C as o}from"./framework-127c059f.js";const r="/blog/assets/image-20200409173846529-1b1dc3a1.png",l="/blog/assets/image-20200409173922108-c39d98ca.png",p={},u=a("h1",{id:"git-基础教程",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#git-基础教程","aria-hidden":"true"},"#"),e(" git 基础教程")],-1),h={href:"https://github.com/521xueweihan/git-tips",target:"_blank",rel:"noopener noreferrer"},g=d(`<hr><p>缓存</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;提交备注&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>拉取</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull <span class="token punctuation">[</span><span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>推送</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token punctuation">[</span><span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="移动提交记录" tabindex="-1"><a class="header-anchor" href="#移动提交记录" aria-hidden="true">#</a> 移动提交记录</h2><h3 id="cherry-pick-整理提交记录" tabindex="-1"><a class="header-anchor" href="#cherry-pick-整理提交记录" aria-hidden="true">#</a> cherry-pick(整理提交记录)</h3><p>将一些提交复制到当前所在位置（HEAD）下面</p><blockquote><p>有选择地 copy 提交记录到当前分支，在多分支开发的时候非常 方便</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> cherry-pick A<span class="token punctuation">..</span>A3 <span class="token comment"># A,A3表示commit hash, 选择 A到A3的提交记录，合并到当前分支，不包含 A 本身</span>
<span class="token function">git</span> cherry-pick A^<span class="token punctuation">..</span>A3 <span class="token comment"># 包含A记录本身</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="交互式-rebase" tabindex="-1"><a class="header-anchor" href="#交互式-rebase" aria-hidden="true">#</a> 交互式 rebase</h3><h2 id="杂项" tabindex="-1"><a class="header-anchor" href="#杂项" aria-hidden="true">#</a> 杂项</h2><h3 id="只取一个提交记录" tabindex="-1"><a class="header-anchor" href="#只取一个提交记录" aria-hidden="true">#</a> 只取一个提交记录</h3><p><img src="`+r+'" alt="image-20200409173846529" loading="lazy"><img src="'+l+`" alt="image-20200409173922108" loading="lazy"></p><p>修复bug分支的前两个递交有一些debug代码和printf代码，而合并修复的时候不需要合并无用的代码，由图1 rebase 到图2的效果</p><p>本地栈式提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># bugFix</span>
<span class="token function">git</span> rebase <span class="token parameter variable">-i</span> master <span class="token comment"># 交互式变基到master分支，omit C2 C3 的提交</span>
<span class="token function">git</span> rebase bugFix master <span class="token comment"># 再以 bugFix 为 base 变基到 master</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提交技巧1" tabindex="-1"><a class="header-anchor" href="#提交技巧1" aria-hidden="true">#</a> 提交技巧1</h3><blockquote><p>git rebase -i <code>&lt;commit&gt;</code> git commit --amend</p></blockquote><p>充分利用 交互式 rebase ，可以修改提交顺序和 pick/omit <code>commit</code></p><h3 id="提交技巧2" tabindex="-1"><a class="header-anchor" href="#提交技巧2" aria-hidden="true">#</a> 提交技巧2</h3><blockquote><p>git cherry-pick</p><p>git commit --amend</p></blockquote><h3 id="tag-打标签-里程碑" tabindex="-1"><a class="header-anchor" href="#tag-打标签-里程碑" aria-hidden="true">#</a> tag(打标签) 里程碑</h3><p>查看标签</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token comment"># 可带上可选的 -l 选项 --list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建标签</p><p>Git 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。</p><p>轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。</p><p>而附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 GNU Privacy Guard （GPG）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。</p><h4 id="附注标签" tabindex="-1"><a class="header-anchor" href="#附注标签" aria-hidden="true">#</a> 附注标签</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1.4 <span class="token parameter variable">-m</span> <span class="token string">&quot;my version 1.4&quot;</span>
<span class="token function">git</span> tag <span class="token parameter variable">-a</span> tag_name <span class="token parameter variable">-m</span> <span class="token string">&quot;附注信息&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="轻量标签" tabindex="-1"><a class="header-anchor" href="#轻量标签" aria-hidden="true">#</a> 轻量标签</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag v1.3
<span class="token comment"># git tag v1.2 20e1e412 # 指定打摸个commit的tag</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="后期打标签" tabindex="-1"><a class="header-anchor" href="#后期打标签" aria-hidden="true">#</a> 后期打标签</h4><p>假设在 v1.2 时你忘记给项目打标签。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1.2 9fceb02
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="共享标签" tabindex="-1"><a class="header-anchor" href="#共享标签" aria-hidden="true">#</a> 共享标签</h4><p>默认情况下，<code>git push</code> 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样——你可以运行 <code>git push origin </code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin v1.5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想要一次性推送很多标签，也可以使用带有 <code>--tags</code> 选项的 <code>git push</code> 命令。 这将会把所有不在远程仓库服务器上的标签全部传送到那里。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin <span class="token parameter variable">--tags</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="删除标签" tabindex="-1"><a class="header-anchor" href="#删除标签" aria-hidden="true">#</a> 删除标签</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># git tag -d &lt;tagname&gt;</span>
<span class="token function">git</span> tag <span class="token parameter variable">-d</span> v1.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除远程仓库的标签</p><p><code>git push origin --delete &lt;tagname&gt;</code></p><p>报错的时候用这种方式，原因是有分支名和tag名重复，git不知道删除谁，用详细路径指定要删除的标签</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> :refs/tags/<span class="token operator">&lt;</span>tagname<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="更新本地远程分支" tabindex="-1"><a class="header-anchor" href="#更新本地远程分支" aria-hidden="true">#</a> 更新本地远程分支</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote update origin <span class="token punctuation">[</span>--prune<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="合并单个文件" tabindex="-1"><a class="header-anchor" href="#合并单个文件" aria-hidden="true">#</a> 合并单个文件</h3><p>假设有这样的需求，基于 <code>develop</code> 分支，新建了分支A和分支B，分支A修改了 <code>function1.js</code> <code>tools.js</code> 文件 分支B修改了 <code>function2.js</code> <code>function3.js</code> 文件 现在要紧急上线一个功能，涉及到分支A中的 <code>tools.js</code> 文件 和分支B中的 <code>function3.js</code> 文件，怎么办，copy，paste?</p><p>用单独文件 checkout 指定 commit 功能</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># develop</span>
<span class="token function">git</span> checkout branch_A tools.js
<span class="token function">git</span> checkout branchB function3.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>develop分支中就有了最新的 <code>tools.js</code> <code>function3.js</code> 文件了</p><p>同理，单独回退文件，现在 <code>functino3.js</code> 文件功能改错了，需要回退到 <code>3f6fe4ef</code> 这个提交记录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout 3f6fe4ef function3.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="describe" tabindex="-1"><a class="header-anchor" href="#describe" aria-hidden="true">#</a> describe</h3><p><code>git describe &lt;ref&gt;</code></p><p>由于标签在代码库中起着“锚点”的作用，Git 还为此专门设计了一个命令用来<strong>描述</strong>离你最近的锚点（也就是标签），它就是 <code>git describe</code>！</p><p>Git Describe 能帮你在提交历史中移动了多次以后找到方向；当你用 <code>git bisect</code>（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时， 可能会用到这个命令。</p><p>当 <code>ref</code> 提交记录上有某个标签时，则只输出标签名称</p><h2 id="git-svn" tabindex="-1"><a class="header-anchor" href="#git-svn" aria-hidden="true">#</a> git svn</h2><p>git 操作 svn 仓库</p><blockquote><p>git svn 是Subversion和Git之间变更集的简单管道。它提供Subversion和Git存储库之间的双向变化流。</p></blockquote><p><code>git help svn</code> 查看帮助命令</p><p><code>git svn help</code> 查看帮助参数</p><p>clone svn repository</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> svn clone <span class="token punctuation">[</span>-s<span class="token operator">|</span>--stdlayout 默认标准目录<span class="token punctuation">]</span> <span class="token punctuation">[</span>-r100:HEAD 指定记录<span class="token punctuation">]</span> svn_repository_url
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果 svn 仓库不是标准的（trunk/branches/tags） 目录结构，需要指定参数 <code>-T/--trunk=&lt;trunk_dir&gt; -b/--branches=&lt;branches_dir&gt; -t/--tags=&lt;tags_dir&gt;</code></p><p>如果一个 svn 仓库很多记录，clone 会非常费时。可以指定提交记录 clone <code>-rxxx:HEAD</code></p><p>正常 git 操作 git add . git commit -m &quot;message&quot;</p><p>可选，拉取 svn repository</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> svn rebase <span class="token comment"># =&gt; git fetch and git merge</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>推送更新 svn repository</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> svn dcommit <span class="token punctuation">[</span>trunk 可选指定分支<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,82);function b(m,v){const s=o("ExternalLinkIcon");return i(),t("div",null,[u,a("blockquote",null,[a("p",null,[a("a",h,[e("git 奇淫技巧"),c(s)])])]),g])}const f=n(p,[["render",b],["__file","index.html.vue"]]);export{f as default};
