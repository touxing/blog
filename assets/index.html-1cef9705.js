import{_ as e,X as t,Y as o,Z as n,$ as a,a1 as i,a0 as c,C as l}from"./framework-441f7d77.js";const p={},r=c(`<h2 id="原型" tabindex="-1"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h2><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><p>为了解决私有方法和变量的作用域问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>
  <span class="token keyword">function</span> <span class="token function">addAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    age<span class="token operator">++</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> addAge
<span class="token punctuation">}</span>

<span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// print 19</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特性：</p><ul><li>函数嵌套函数</li><li>内部函数可以引用外部函数的参数和变量</li><li>参数和变量不会被垃圾回收机制回收</li></ul><p>好处：</p><ol><li>希望变量长期存储在内存中</li><li>避免全局变量污染</li><li>私有成员的存在</li></ol><p>缺点：</p><ol><li>常驻内存，增加内存使用量</li><li>使用不当导致内存泄漏</li></ol><h2 id="存储" tabindex="-1"><a class="header-anchor" href="#存储" aria-hidden="true">#</a> 存储</h2><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> cookie</h3><p>存储大小一般是 4k 按域名存储，存在跨域问题 可设置过期时间</p><h3 id="web-storage" tabindex="-1"><a class="header-anchor" href="#web-storage" aria-hidden="true">#</a> web storage</h3><ul><li>localStorage 本地持久化存储 除非主动删除数据，否则数据永不过期</li><li>sessionStorage 会话级别存储，会话结束，数据销毁</li></ul><p><strong>与cookie的区别</strong> cookie - 大小受限，每次请求新的页面 <code>cookie</code> 会被发送过去，浪费宽带 - 需要指定作用域，不可跨域使用</p><p>storage - 存储大 - 不需要指定作用域，直接使用</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,18),d={href:"https://juejin.im/post/5e8b163ff265da47ee3f54a6",target:"_blank",rel:"noopener noreferrer"};function u(k,h){const s=l("ExternalLinkIcon");return t(),o("div",null,[r,n("blockquote",null,[n("p",null,[a("参考资料："),n("a",d,[a("https://juejin.im/post/5e8b163ff265da47ee3f54a6"),i(s)])])])])}const f=e(p,[["render",u],["__file","index.html.vue"]]);export{f as default};
