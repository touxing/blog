const n=JSON.parse(`{"key":"v-fb4ba7fe","path":"/posts/javascript/%E6%89%8B%E5%86%99%E9%A2%98/Promise/","title":"手写实现Promise","lang":"zh-CN","frontmatter":{"date":"2020-11-23T00:00:00.000Z","category":["javascript"],"tag":["Promise","面试"],"description":"手写实现Promise /* * File Created: Tuesday, 14th March 2023 3:39:42 pm * Author: hotsuitor (hotsuitor@qq.com) * ----- * Last Modified: Tuesday, 14th March 2023 4:35:43 pm * Modified By: hotsuitor (hotsuitor@qq.com&gt;) * ----- */ const PROMISE_STATUS_PENDING = 'pending' // 等待状态 const PROMISE_STATUS_FULFILED = 'fulfilled' // 成功状态 const PROMISE_STATUS_REJECTED = 'rejected' // 失败状态 // help function function execFunctionWithCatchError(execFn, value, resolve, reject) { try { const result = execFn(value) resolve(result) } catch (error) { reject(error) } } class MyPromise { constructor(executor) { this.status = PROMISE_STATUS_PENDING // promise状态 this.value = undefined // resolve返回值 this.reason = undefined // reject返回值 this.onFulFilledFns = [] // 保存成功回调 this.onRejectedFns = [] // 保存失败回调 const resolve = (value) =&gt; { if (this.status === PROMISE_STATUS_PENDING) { queueMicrotask(() =&gt; { if (this.status !== PROMISE_STATUS_PENDING) return this.status = PROMISE_STATUS_FULFILED this.value = value this.onFulFilledFns.forEach((fn) =&gt; { fn(this.value) }) }) } } const reject = (reason) =&gt; { if (this.status === PROMISE_STATUS_PENDING) { queueMicrotask(() =&gt; { if (this.status !== PROMISE_STATUS_PENDING) return this.status = PROMISE_STATUS_REJECTED this.reason = reason this.onRejectedFns.forEach((fn) =&gt; { fn(this.reason) }) }) } } try { executor(resolve, reject) } catch (error) { reject(error) } } then(onFulfilled, onRejected) { onFulfilled = onFulfilled || ((value) =&gt; value) onRejected = onRejected || ((err) =&gt; { throw err }) return new MyPromise((resolve, reject) =&gt; { // 1. when operate then, status has confirmed if (this.status === PROMISE_STATUS_FULFILED &amp;&amp; onFulfilled) { execFunctionWithCatchError(onFulfilled, this.value, resolve, reject) } if (this.status === PROMISE_STATUS_REJECTED &amp;&amp; onRejected) { execFunctionWithCatchError(onRejected, this.reason, resolve, reject) } if (this.status === PROMISE_STATUS_PENDING) { if (onFulfilled) { this.onFulFilledFns.push(() =&gt; { execFunctionWithCatchError(onFulfilled, this.value, resolve, reject) }) } if (onRejected) { this.onRejectedFns.push(() =&gt; { execFunctionWithCatchError(onRejected, this.reason, resolve, reject) }) } } }) } catch(onRejected) { return this.then(undefined, onRejected) } finally(onFinally) { this.then( () =&gt; { onFinally() }, () =&gt; { onFinally() } ) } static resolve(value) { return new MyPromise((resolve) =&gt; resolve(value)) } static reject(reason) { return new MyPromise((resolve, reject) =&gt; reject(reason)) } static all(promises) { return new MyPromise((resolve, reject) =&gt; { const values = [] promises.forEach((promise) =&gt; { promise.then( (res) =&gt; { values.push(res) if (values.length === promises.length) { resolve(values) } }, (err) =&gt; reject(err) ) }) }) } static allSettled(promises) { return new MyPromise((resolve) =&gt; { const results = [] promises.forEach((promise) =&gt; { promise.then( (res) =&gt; { results.push({ status: PROMISE_STATUS_FULFILED, value: res }) if (results.length === promises.length) { resolve(results) } }, (err) =&gt; { results.push({ status: PROMISE_STATUS_REJECTED, value: err }) if (results.length === results.length) { resolve(results) } } ) }) }) } static race(promises) { return new MyPromise((resolve, reject) =&gt; { promises.forEach((promise) =&gt; { promise.then(resolve, reject) }) }) } static any(promises) { return new MyPromise((resolve, reject) =&gt; { const reasons = [] promises.forEach((promise) =&gt; { promise.then(resolve, (err) =&gt; { reasons.push(err) if (reasons.length === promises.length) { reject(reasons) } }) }) }) } } /** test */ const p1 = new MyPromise((resolve, reject) =&gt; { setTimeout(() =&gt; { console.log('--- 1 ---') resolve(111) }) }).then((res) =&gt; { console.log('p1 res :&gt;&gt; ', res) }) const p2 = new MyPromise((resolve, reject) =&gt; { console.log('--- 2 ---') resolve(222) }) const p3 = new MyPromise((resolve, reject) =&gt; { console.log('--- 3 ---') resolve(333) }) const p4 = new MyPromise((resolve, reject) =&gt; { console.log('--- 4 ---') reject(444) }) MyPromise.all([p2, p3]).then((res) =&gt; { console.log('p2&amp;p3 res :&gt;&gt; ', res) }) MyPromise.all([p2, p4]) .then((res) =&gt; { console.log('p2&amp;p4 res :&gt;&gt; ', res) }) .catch((err) =&gt; { console.log('err :&gt;&gt; ', err) })","head":[["meta",{"property":"og:url","content":"https://touxing.github.io/blog/blog/posts/javascript/%E6%89%8B%E5%86%99%E9%A2%98/Promise/"}],["meta",{"property":"og:site_name","content":"磨刀霍霍向猪羊"}],["meta",{"property":"og:title","content":"手写实现Promise"}],["meta",{"property":"og:description","content":"手写实现Promise /* * File Created: Tuesday, 14th March 2023 3:39:42 pm * Author: hotsuitor (hotsuitor@qq.com) * ----- * Last Modified: Tuesday, 14th March 2023 4:35:43 pm * Modified By: hotsuitor (hotsuitor@qq.com&gt;) * ----- */ const PROMISE_STATUS_PENDING = 'pending' // 等待状态 const PROMISE_STATUS_FULFILED = 'fulfilled' // 成功状态 const PROMISE_STATUS_REJECTED = 'rejected' // 失败状态 // help function function execFunctionWithCatchError(execFn, value, resolve, reject) { try { const result = execFn(value) resolve(result) } catch (error) { reject(error) } } class MyPromise { constructor(executor) { this.status = PROMISE_STATUS_PENDING // promise状态 this.value = undefined // resolve返回值 this.reason = undefined // reject返回值 this.onFulFilledFns = [] // 保存成功回调 this.onRejectedFns = [] // 保存失败回调 const resolve = (value) =&gt; { if (this.status === PROMISE_STATUS_PENDING) { queueMicrotask(() =&gt; { if (this.status !== PROMISE_STATUS_PENDING) return this.status = PROMISE_STATUS_FULFILED this.value = value this.onFulFilledFns.forEach((fn) =&gt; { fn(this.value) }) }) } } const reject = (reason) =&gt; { if (this.status === PROMISE_STATUS_PENDING) { queueMicrotask(() =&gt; { if (this.status !== PROMISE_STATUS_PENDING) return this.status = PROMISE_STATUS_REJECTED this.reason = reason this.onRejectedFns.forEach((fn) =&gt; { fn(this.reason) }) }) } } try { executor(resolve, reject) } catch (error) { reject(error) } } then(onFulfilled, onRejected) { onFulfilled = onFulfilled || ((value) =&gt; value) onRejected = onRejected || ((err) =&gt; { throw err }) return new MyPromise((resolve, reject) =&gt; { // 1. when operate then, status has confirmed if (this.status === PROMISE_STATUS_FULFILED &amp;&amp; onFulfilled) { execFunctionWithCatchError(onFulfilled, this.value, resolve, reject) } if (this.status === PROMISE_STATUS_REJECTED &amp;&amp; onRejected) { execFunctionWithCatchError(onRejected, this.reason, resolve, reject) } if (this.status === PROMISE_STATUS_PENDING) { if (onFulfilled) { this.onFulFilledFns.push(() =&gt; { execFunctionWithCatchError(onFulfilled, this.value, resolve, reject) }) } if (onRejected) { this.onRejectedFns.push(() =&gt; { execFunctionWithCatchError(onRejected, this.reason, resolve, reject) }) } } }) } catch(onRejected) { return this.then(undefined, onRejected) } finally(onFinally) { this.then( () =&gt; { onFinally() }, () =&gt; { onFinally() } ) } static resolve(value) { return new MyPromise((resolve) =&gt; resolve(value)) } static reject(reason) { return new MyPromise((resolve, reject) =&gt; reject(reason)) } static all(promises) { return new MyPromise((resolve, reject) =&gt; { const values = [] promises.forEach((promise) =&gt; { promise.then( (res) =&gt; { values.push(res) if (values.length === promises.length) { resolve(values) } }, (err) =&gt; reject(err) ) }) }) } static allSettled(promises) { return new MyPromise((resolve) =&gt; { const results = [] promises.forEach((promise) =&gt; { promise.then( (res) =&gt; { results.push({ status: PROMISE_STATUS_FULFILED, value: res }) if (results.length === promises.length) { resolve(results) } }, (err) =&gt; { results.push({ status: PROMISE_STATUS_REJECTED, value: err }) if (results.length === results.length) { resolve(results) } } ) }) }) } static race(promises) { return new MyPromise((resolve, reject) =&gt; { promises.forEach((promise) =&gt; { promise.then(resolve, reject) }) }) } static any(promises) { return new MyPromise((resolve, reject) =&gt; { const reasons = [] promises.forEach((promise) =&gt; { promise.then(resolve, (err) =&gt; { reasons.push(err) if (reasons.length === promises.length) { reject(reasons) } }) }) }) } } /** test */ const p1 = new MyPromise((resolve, reject) =&gt; { setTimeout(() =&gt; { console.log('--- 1 ---') resolve(111) }) }).then((res) =&gt; { console.log('p1 res :&gt;&gt; ', res) }) const p2 = new MyPromise((resolve, reject) =&gt; { console.log('--- 2 ---') resolve(222) }) const p3 = new MyPromise((resolve, reject) =&gt; { console.log('--- 3 ---') resolve(333) }) const p4 = new MyPromise((resolve, reject) =&gt; { console.log('--- 4 ---') reject(444) }) MyPromise.all([p2, p3]).then((res) =&gt; { console.log('p2&amp;p3 res :&gt;&gt; ', res) }) MyPromise.all([p2, p4]) .then((res) =&gt; { console.log('p2&amp;p4 res :&gt;&gt; ', res) }) .catch((err) =&gt; { console.log('err :&gt;&gt; ', err) })"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-18T14:44:37.000Z"}],["meta",{"property":"article:tag","content":"Promise"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2020-11-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-18T14:44:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"手写实现Promise\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-11-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-18T14:44:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"应用","slug":"应用","link":"#应用","children":[]}],"git":{"createdTime":1678863287000,"updatedTime":1684421077000,"contributors":[{"name":"hotsuitor","email":"hotsuitor@qq.com","commits":2}]},"readingTime":{"minutes":0.14,"words":41},"filePathRelative":"posts/javascript/手写题/Promise/README.md","localizedDate":"2020年11月23日","excerpt":"<h1> 手写实现Promise</h1>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">/*\\n * File Created: Tuesday, 14th March 2023 3:39:42 pm\\n * Author: hotsuitor (hotsuitor@qq.com)\\n * -----\\n * Last Modified: Tuesday, 14th March 2023 4:35:43 pm\\n * Modified By: hotsuitor (hotsuitor@qq.com&gt;)\\n * -----\\n */</span>\\n\\n<span class=\\"token keyword\\">const</span> <span class=\\"token constant\\">PROMISE_STATUS_PENDING</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'pending'</span> <span class=\\"token comment\\">// 等待状态</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token constant\\">PROMISE_STATUS_FULFILED</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'fulfilled'</span> <span class=\\"token comment\\">// 成功状态</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token constant\\">PROMISE_STATUS_REJECTED</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'rejected'</span> <span class=\\"token comment\\">// 失败状态</span>\\n\\n<span class=\\"token comment\\">// help function</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">execFunctionWithCatchError</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">execFn<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">,</span> resolve<span class=\\"token punctuation\\">,</span> reject</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">execFn</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>result<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span>error<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">reject</span><span class=\\"token punctuation\\">(</span>error<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyPromise</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">executor</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>status <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">PROMISE_STATUS_PENDING</span> <span class=\\"token comment\\">// promise状态</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">undefined</span> <span class=\\"token comment\\">// resolve返回值</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>reason <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">undefined</span> <span class=\\"token comment\\">// reject返回值</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>onFulFilledFns <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token comment\\">// 保存成功回调</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>onRejectedFns <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token comment\\">// 保存失败回调</span>\\n\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">resolve</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>status <span class=\\"token operator\\">===</span> <span class=\\"token constant\\">PROMISE_STATUS_PENDING</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">queueMicrotask</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>status <span class=\\"token operator\\">!==</span> <span class=\\"token constant\\">PROMISE_STATUS_PENDING</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span>\\n          <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>status <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">PROMISE_STATUS_FULFILED</span>\\n          <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> value\\n          <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>onFulFilledFns<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">fn</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">fn</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">reject</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">reason</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>status <span class=\\"token operator\\">===</span> <span class=\\"token constant\\">PROMISE_STATUS_PENDING</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">queueMicrotask</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>status <span class=\\"token operator\\">!==</span> <span class=\\"token constant\\">PROMISE_STATUS_PENDING</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span>\\n          <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>status <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">PROMISE_STATUS_REJECTED</span>\\n          <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>reason <span class=\\"token operator\\">=</span> reason\\n          <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>onRejectedFns<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">fn</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">fn</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>reason<span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">executor</span><span class=\\"token punctuation\\">(</span>resolve<span class=\\"token punctuation\\">,</span> reject<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span>error<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">reject</span><span class=\\"token punctuation\\">(</span>error<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">onFulfilled<span class=\\"token punctuation\\">,</span> onRejected</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    onFulfilled <span class=\\"token operator\\">=</span> onFulfilled <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> value<span class=\\"token punctuation\\">)</span>\\n    onRejected <span class=\\"token operator\\">=</span>\\n      onRejected <span class=\\"token operator\\">||</span>\\n      <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">err</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">throw</span> err\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyPromise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve<span class=\\"token punctuation\\">,</span> reject</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 1. when operate then,  status has confirmed</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>status <span class=\\"token operator\\">===</span> <span class=\\"token constant\\">PROMISE_STATUS_FULFILED</span> <span class=\\"token operator\\">&amp;&amp;</span> onFulfilled<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">execFunctionWithCatchError</span><span class=\\"token punctuation\\">(</span>onFulfilled<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">,</span> resolve<span class=\\"token punctuation\\">,</span> reject<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>status <span class=\\"token operator\\">===</span> <span class=\\"token constant\\">PROMISE_STATUS_REJECTED</span> <span class=\\"token operator\\">&amp;&amp;</span> onRejected<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">execFunctionWithCatchError</span><span class=\\"token punctuation\\">(</span>onRejected<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>reason<span class=\\"token punctuation\\">,</span> resolve<span class=\\"token punctuation\\">,</span> reject<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>status <span class=\\"token operator\\">===</span> <span class=\\"token constant\\">PROMISE_STATUS_PENDING</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>onFulfilled<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>onFulFilledFns<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">execFunctionWithCatchError</span><span class=\\"token punctuation\\">(</span>onFulfilled<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">,</span> resolve<span class=\\"token punctuation\\">,</span> reject<span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>onRejected<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>onRejectedFns<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">execFunctionWithCatchError</span><span class=\\"token punctuation\\">(</span>onRejected<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>reason<span class=\\"token punctuation\\">,</span> resolve<span class=\\"token punctuation\\">,</span> reject<span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">catch</span><span class=\\"token punctuation\\">(</span>onRejected<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">undefined</span><span class=\\"token punctuation\\">,</span> onRejected<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token function\\">finally</span><span class=\\"token punctuation\\">(</span>onFinally<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>\\n      <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">onFinally</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">onFinally</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyPromise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token function\\">reject</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">reason</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyPromise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve<span class=\\"token punctuation\\">,</span> reject</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token function\\">reject</span><span class=\\"token punctuation\\">(</span>reason<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token function\\">all</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">promises</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyPromise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve<span class=\\"token punctuation\\">,</span> reject</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">const</span> values <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n      promises<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">promise</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        promise<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>\\n          <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">res</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n            values<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>values<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">===</span> promises<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n              <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>values<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">}</span>\\n          <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">err</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token function\\">reject</span><span class=\\"token punctuation\\">(</span>err<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token function\\">allSettled</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">promises</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyPromise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">const</span> results <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n      promises<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">promise</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        promise<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>\\n          <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">res</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n            results<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">status</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">PROMISE_STATUS_FULFILED</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">value</span><span class=\\"token operator\\">:</span> res <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>results<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">===</span> promises<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n              <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>results<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">}</span>\\n          <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">err</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n            results<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">status</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">PROMISE_STATUS_REJECTED</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">value</span><span class=\\"token operator\\">:</span> err <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>results<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">===</span> results<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n              <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>results<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">}</span>\\n          <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token function\\">race</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">promises</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyPromise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve<span class=\\"token punctuation\\">,</span> reject</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      promises<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">promise</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        promise<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>resolve<span class=\\"token punctuation\\">,</span> reject<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token function\\">any</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">promises</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyPromise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve<span class=\\"token punctuation\\">,</span> reject</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">const</span> reasons <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n      promises<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">promise</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        promise<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>resolve<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">err</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n          reasons<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>err<span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>reasons<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">===</span> promises<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">reject</span><span class=\\"token punctuation\\">(</span>reasons<span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token doc-comment comment\\">/** test */</span>\\n<span class=\\"token keyword\\">const</span> p1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyPromise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve<span class=\\"token punctuation\\">,</span> reject</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'--- 1 ---'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">111</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">res</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'p1 res :&gt;&gt; '</span><span class=\\"token punctuation\\">,</span> res<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">const</span> p2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyPromise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve<span class=\\"token punctuation\\">,</span> reject</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'--- 2 ---'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">222</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">const</span> p3 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyPromise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve<span class=\\"token punctuation\\">,</span> reject</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'--- 3 ---'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">333</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">const</span> p4 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyPromise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve<span class=\\"token punctuation\\">,</span> reject</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'--- 4 ---'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function\\">reject</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">444</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\nMyPromise<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">all</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span>p2<span class=\\"token punctuation\\">,</span> p3<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">res</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'p2&amp;p3 res :&gt;&gt; '</span><span class=\\"token punctuation\\">,</span> res<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\nMyPromise<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">all</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span>p2<span class=\\"token punctuation\\">,</span> p4<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">res</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'p2&amp;p4 res :&gt;&gt; '</span><span class=\\"token punctuation\\">,</span> res<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">catch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">err</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'err :&gt;&gt; '</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
