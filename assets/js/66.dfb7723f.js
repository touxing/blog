(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{473:function(t,s,e){"use strict";e.r(s);var a=e(22),i=Object(a.a)({},(function(){var t=this.$createElement,s=this._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h1",{attrs:{id:"模板方法模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式"}},[this._v("#")]),this._v(" 模板方法模式")]),this._v(" "),s("p",[this._v("3 ⭐️")]),this._v(" "),s("p",[this._v("模板方法模式（Template Method Pattern）父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类中，使得子类可以不改变父类的算法结构的同时，重新定义算法中的某些实现步骤。模板方法模式的关键是算法步骤的骨架和具体实现分离。")])])}),[],!1,null,null,null);s.default=i.exports}}]);