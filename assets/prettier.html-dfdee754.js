import{_ as o,X as i,Y as l,Z as n,$ as s,a0 as e,a1 as t,C as p}from"./framework-2b07d456.js";const c={},r=n("h1",{id:"prettier-代码格式化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#prettier-代码格式化","aria-hidden":"true"},"#"),s(" prettier 代码格式化")],-1),d={href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"},u=t(`<h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践" aria-hidden="true">#</a> 实践</h2><blockquote><p>在一个老旧项目配置 prettier 格式化旧项目的代码，达到维护风格统一的目的</p></blockquote><h2 id="_1-安装" tabindex="-1"><a class="header-anchor" href="#_1-安装" aria-hidden="true">#</a> 1.安装</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add -D prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>建议在当前项目安装，但也可以全局安装 <code>npm install -g prettier</code></p></blockquote><h2 id="_2-配置" tabindex="-1"><a class="header-anchor" href="#_2-配置" aria-hidden="true">#</a> 2.配置</h2><p>在项目根目录新建 <code>.prettierc</code> 文件，编辑规则参考官网，例子如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;babel&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;trailingComma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;tabWidth&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">&quot;printWidth&quot;</span><span class="token operator">:</span> <span class="token number">210</span><span class="token punctuation">,</span>
  <span class="token property">&quot;useTabs&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;endOfLine&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lf&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;overrides&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;*.html&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;html&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;*.css&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;css&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;*.less&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;less&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>该文件是格式化配置文件，配置多少个空格，多长换行，都在这里配置</p></blockquote><p>项目是用 angularjs + less +gulp 写的，这里配置了不同文件的格式化解析器，可以定制不同文件类型格式化不同的风格。</p><h3 id="配置命令" tabindex="-1"><a class="header-anchor" href="#配置命令" aria-hidden="true">#</a> 配置命令</h3><p>为了方便使用，把格式化命令写成 npm 脚本。当然每次单独写命令执行也是可以的。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
 <span class="token property">&quot;fix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npx prettier --write js/*.js component/** less/** *.html&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>查看帮助命令 prettier --help <code>--write</code> 参数是编辑源文件的意思，就是把源文件编辑格式化</p></blockquote><p>本地有一些第三方的库文件，不想被格式化，可以在根目录配置 <code>.prettierignore</code> 文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>*.min.js
*.handle.js
*.min.css
lib/
node_modules/
data/
dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行格式化" tabindex="-1"><a class="header-anchor" href="#执行格式化" aria-hidden="true">#</a> 执行格式化</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> fix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再看源码文件，会发现文件被格式化了。 如果格式化过程中有出错的文件，查看提示，一般会报一些错误，比如： 格式化 html 文件，会提示，哪里少了一个闭合标签之类的。 修改好错误后，重新格式化一次，直至没有错误提示，至此，项目风格统一工作完成。</p><hr><h3 id="配合-eslint-使用" tabindex="-1"><a class="header-anchor" href="#配合-eslint-使用" aria-hidden="true">#</a> 配合 ESLint 使用</h3><p>安装</p><p><code>prettier-eslint-cli</code> prettier eslint cli 工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> prettier-eslint-cli eslint-config-prettier eslint-plugin-prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>.eslintrs.sj</code> 配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;eslint-config-prettier&#39;</span> <span class="token comment">// 配置 prettier 格式化规则</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;prettier&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 支持 prettier 格式化</span>
    <span class="token string">&#39;eslint-plugin-prettier&#39;</span> <span class="token comment">// prettier 按照 eslint 规则格式化需要用到的插件</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>格式化命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>prettier-eslint <span class="token parameter variable">--write</span> <span class="token string">&quot;src/**/*.js&quot;</span> <span class="token string">&quot;src/**/*.vue&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置到 <code>package.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;script&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token property">&quot;format&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier-eslint --write \\&quot;src/**/*.js\\&quot; \\&quot;src/**/*.vue\\&quot;&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-配置-git-hook" tabindex="-1"><a class="header-anchor" href="#_3-配置-git-hook" aria-hidden="true">#</a> 3.配置 git hook</h2><h3 id="配置-git-hooks-安装-husky-7-钩子-lint-staged-12-格式化缓冲区的内容" tabindex="-1"><a class="header-anchor" href="#配置-git-hooks-安装-husky-7-钩子-lint-staged-12-格式化缓冲区的内容" aria-hidden="true">#</a> 配置 <code>git hooks</code> 安装 <code>husky</code> @7 钩子+<code>lint-staged</code> @12 格式化缓冲区的内容</h3><ol><li><p>git 版本 &gt; 2.9.0</p></li><li><p><code>npm install husky --save-dev</code> <strong>在windows下我遇到不生效的问题，有资料显示，windows下用的是全局 husky，需要全局安装</strong>，或者 执行<code>node_modules</code>下的 <code>husky</code> 官方有资料，没仔细看。</p><ul><li><blockquote><p>For Windows users, if you see the help message when running <code>npx husky add ...</code>, try <code>node node_modules/.bin/husky add ... </code>instead. This isn&#39;t an issue with husky code.</p></blockquote></li></ul><ol><li>启用 git hooks <code>npx husky install</code>，默认会在项目根目录下初始化一个 <code>.husky</code> 目录</li><li>创建钩子</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;npm test&quot;</span>
<span class="token function">git</span> <span class="token function">add</span> .husky/pre-commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>try a commit</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Keep clam and commit&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>hook 可以放到专职配置文件中， create a config file <code>.huskyrc.json</code> in root folder</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;hook&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;pre-commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm test&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>npm install lint-staged -D</code></p><ol><li>创建配置文件 <code>.lintstaged.json</code></li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;*.{js,mjs,wxml,json,md}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier -c --write&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;*.{scss, wxss}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;stylelint --syntax=scss --fix&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>更新 husky 配置，仅对缓存内容执行 hooks 操作</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#let pre-commit hook call lint-staged</span>
npx husky <span class="token builtin class-name">set</span> .husky/pre-commit <span class="token string">&quot;npx lint-staged&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>也可以直接 修改 <code>.husky/pre-commit</code> 文件</p></blockquote><ol start="5"><li>尝试 commit，验证 hooks 是否生效</li></ol><h3 id="规范-commit-message-提交" tabindex="-1"><a class="header-anchor" href="#规范-commit-message-提交" aria-hidden="true">#</a> 规范 commit message 提交</h3>`,37),m={href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 全局安装 Commitizen
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> commitizen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>全局安装 Commitizen 后，用 cz-conventional-changelog 适配器来初始化你的项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 初始化 cz-conventional-changelog 适配器
commitizen init cz-conventional-changelog --save-dev --save-exact
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化做了3件事</p><ul><li>安装 cz-conventional-changelog 依赖</li><li>把依赖保存到 package.json 的 dependencies 或 devDependencies 中</li><li>在根目录的 package.json 中 添加如下所示的 config.commitizen</li></ul><p>或者，在项目根目录新建一个 <code>.czrc</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cz-conventional-changelog&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>git cz</code> 效果：</p><figure><img src="https://note.youdao.com/yws/res/e/WEBRESOURCE60e19bc45816f5c4a7366e4f2fa0cefe" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="commitlint-校验提交" tabindex="-1"><a class="header-anchor" href="#commitlint-校验提交" aria-hidden="true">#</a> commitlint 校验提交</h4>`,10),k={href:"https://segmentfault.com/a/1190000023388007",target:"_blank",rel:"noopener noreferrer"},b=t(`<ol><li>install commitlint @commitlint/config-conventional</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i --save-dev @commitlint/config-conventional @commitlint/cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>项目根目录创建 <code>commitlint.config.js</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@commitlint/config-conventional&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// rules 里面可以设置一些自定义的校验规则</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：因为 @commitlint/config-conventional 校验规则遵循 Angular 的规范， 所以我们在用 cz-customizable 自定义中文配置时， 是按照给出的符合 Angular 规范的示例 cz-config-EXAMPLE.js 编写.cz-config.js 的。但是如果你自定义的 Commitizen 配置不符合 Angular 规范，可以使用 commitlint-config-cz 设置校验规则。（推荐还是按照 Angular 规范进行 cz-customizable 自定义配置）</p></blockquote><p>一个项目应该有的配置文件 <img src="https://note.youdao.com/yws/res/d/WEBRESOURCEbfac340103a0f804ebf737bd38a5423d" alt="image.png" loading="lazy"></p>`,6);function g(h,q){const a=p("ExternalLinkIcon");return i(),l("div",null,[r,n("blockquote",null,[n("p",null,[s("详情参考官网："),n("a",d,[s("https://prettier.io/"),e(a)])])]),u,n("ol",null,[n("li",null,[s("global install Commitizen 是一个帮助撰写规范 commit message 的工具。他有一个命令行工具 "),n("a",m,[s("cz-cli"),e(a)])])]),v,n("blockquote",null,[n("p",null,[n("a",k,[s("参考"),e(a)]),s(" commitlint 可以检查 commit messages 是否符合常规提交格式，需要一份校验配置，推荐@commitlint/config-conventional 。")])]),b])}const y=o(c,[["render",g],["__file","prettier.html.vue"]]);export{y as default};
