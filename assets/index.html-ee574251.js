const n=JSON.parse('{"key":"v-478b4e39","path":"/posts/algo/28%E5%A0%86%E5%92%8C%E5%A0%86%E6%8E%92%E5%BA%8F/","title":"28堆和堆排序","lang":"zh-CN","frontmatter":{"title":"28堆和堆排序","date":"2020-03-10T00:00:00.000Z","icon":"table","category":["算法"],"tag":["算法","algo","Heap","排序"],"description":"堆和堆排序：为什么说堆排序没有快速排序快？ 堆： 堆是一个完全二叉树; 堆中的每一个节点的值都必须大于等于（或小于等于）其子树中每个节点的值。 大顶堆，根节点最大 小顶堆，跟节点最小 堆的应用：如何快速渠道Top10最热门的搜索关键词 优先级队列 求Top K 求中位数 /* * @Author: HotSuitor * @Date: 2020-03-19 16:01:22 * @LastEditors: hs * @LastEditTime: 2020-03-19 22:44:45 * @Description: hotsuitor@qq.com */ // 堆 const heap = [undefined, 33, 27, 21, 16, 13, 15, 9, 5, 6, 7, 8, 1, 2]; class Heap { constructor(arr, size) { this.heapArray = arr || []; this.size = size + 1 || 300; } // 根节点索引=1,左子节点=2*i,右子节点=2*i+1, i=层数 insert(data) { let len = this.heapArray.length; if (len &gt;= this.size) { console.log(\\"堆满了\\"); return; // 堆满了 } if (len === 0) { this.heapArray.splice(0, 0, undefined, data); return; } this.heapArray.push(data); let currentIndex = this.heapArray.length - 1; let i; // 层数,从0开始 let parentIndex; //! 奇数-&gt;跟、右节点，偶数-&gt;左节点 parentIndex = currentIndex % 2 ? (currentIndex - 1) / 2 : currentIndex / 2; // 父节点的索引 // 自下往上堆化 while ( parentIndex &gt; 0 &amp;&amp; this.heapArray[currentIndex] &gt; this.heapArray[parentIndex] ) { this.swap(this.heapArray, currentIndex, parentIndex); currentIndex = parentIndex; parentIndex = currentIndex % 2 ? (currentIndex - 1) / 2 : currentIndex / 2; // 父节点的索引 } } // 删除堆顶元素 deleteTop(data) { let len = this.heapArray.length; if (len &lt;= 2) return this.heapArray; /**最后一个与第一个元素互换位置 * 再自顶而下堆化 */ this.swap(this.heapArray, 1, len - 1); this.heapArray.pop(); let i = 1; while ( i * 2 &lt; this.heapArray.length &amp;&amp; this.heapArray[i] &lt; this.heapArray[i * 2] ) { this.swap(this.heapArray, i, i * 2); i = i * 2; } } scan() { return this.heapArray; } swap(arr, i, j) { let tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } } class Heap2 { constructor(capacity) { this.arr = new Array(capacity + 1); // 数组下标从1开始 this.n = capacity; // 堆可以存储的最大数据个数 this.count = 0; // 堆中已存储的数据个数 } // 建堆 static buildHeap(arr) { if (!Array.isArray(arr)) return; let n = arr.length - 1; // 堆元素个数 // 从第i个节点开始从上往下堆化，子节点不需要比较，所以向下取整 let i = Math.floor(n / 2); for (; i &gt;= 1; --i) { Heap2.heapify(arr, n, i); } return arr; } static heapify(arr, n, i) { while (true) { let maxPox = i; // 左子节点比父节点大 if (i * 2 &lt;= n &amp;&amp; arr[i] &lt; arr[i * 2]) maxPox = i * 2; // 右节点比左节点大 if (i * 2 + 1 &lt;= n &amp;&amp; arr[maxPox] &lt; arr[i * 2 + 1]) maxPox = i * 2 + 1; if (maxPox === i) break; // 交互父子节点 Heap2.swap(arr, i, maxPox); i = maxPox; } } insert(data) { if (this.count &gt;= this.n) return; // 堆满了 this.count++; this.arr[this.count] = data; let i = this.count; // 自下而上堆化 while (i / 2 &gt; 0 &amp;&amp; this.arr[i] &gt; this.arr[i / 2]) { this.swap(this.arr, i, i / 2); i = i / 2; } } static deleteTop(arr) { if (arr.length &lt;= 1) return; Heap2.swap(arr, 1, arr.length - 1); let result = arr.pop(); let i = 1; while (true) { let maxPox = i; // 左节点 if (i * 2 &lt; arr.length &amp;&amp; arr[i] &lt; arr[i * 2]) maxPox = i * 2; if (i * 2 + 1 &lt; arr.length &amp;&amp; arr[maxPox] &lt; arr[i * 2 + 1]) maxPox = i * 2 + 1; if (maxPox === i) break; Heap2.swap(arr, i, maxPox); i = maxPox; } return result; } scan() { return this.arr; } static swap(arr, i, j) { let tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } swap(arr, i, j) { let tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } // 堆排序 static sort(arr) { let i = arr.length - 1; // 排序的索引 let result = new Array(arr.length); for (; i &gt;= 1; i--) { let maxValue = Heap2.deleteTop(arr); result[i] = maxValue; } return result; } } // let heap2 = new Heap(heap); // heap2.insert(22); // heap2.insert(23); // console.log(heap2.scan()); // heap2.deleteTop(); // heap2.deleteTop(); // console.log(heap2.scan()); // let heap3 = new Heap([], 5); // heap3.insert(23); // heap3.insert(27); // heap3.insert(33); // heap3.insert(45); // heap3.insert(22); // console.log(heap3.scan()); // heap3.deleteTop(); // console.log(heap3.scan()); // let heap4 = new Heap2(5); // heap4.insert(33); // heap4.insert(23); // heap4.insert(45); // heap4.insert(22); // heap4.insert(7); // console.log(heap4.scan()); let arr1 = [, 3, 44, 23, 18, 39, 26, 77]; let arr2 = [...arr1]; let arr1Heap = Heap2.buildHeap(arr2); console.log(\\"arr1\\", arr1); console.log(\\"arr1Heap\\", arr1Heap); console.log(\\"heapSort\\", Heap2.sort(arr1Heap));","head":[["meta",{"property":"og:url","content":"https://touxing.github.io/blog/blog/posts/algo/28%E5%A0%86%E5%92%8C%E5%A0%86%E6%8E%92%E5%BA%8F/"}],["meta",{"property":"og:site_name","content":"磨刀霍霍向猪羊"}],["meta",{"property":"og:title","content":"28堆和堆排序"}],["meta",{"property":"og:description","content":"堆和堆排序：为什么说堆排序没有快速排序快？ 堆： 堆是一个完全二叉树; 堆中的每一个节点的值都必须大于等于（或小于等于）其子树中每个节点的值。 大顶堆，根节点最大 小顶堆，跟节点最小 堆的应用：如何快速渠道Top10最热门的搜索关键词 优先级队列 求Top K 求中位数 /* * @Author: HotSuitor * @Date: 2020-03-19 16:01:22 * @LastEditors: hs * @LastEditTime: 2020-03-19 22:44:45 * @Description: hotsuitor@qq.com */ // 堆 const heap = [undefined, 33, 27, 21, 16, 13, 15, 9, 5, 6, 7, 8, 1, 2]; class Heap { constructor(arr, size) { this.heapArray = arr || []; this.size = size + 1 || 300; } // 根节点索引=1,左子节点=2*i,右子节点=2*i+1, i=层数 insert(data) { let len = this.heapArray.length; if (len &gt;= this.size) { console.log(\\"堆满了\\"); return; // 堆满了 } if (len === 0) { this.heapArray.splice(0, 0, undefined, data); return; } this.heapArray.push(data); let currentIndex = this.heapArray.length - 1; let i; // 层数,从0开始 let parentIndex; //! 奇数-&gt;跟、右节点，偶数-&gt;左节点 parentIndex = currentIndex % 2 ? (currentIndex - 1) / 2 : currentIndex / 2; // 父节点的索引 // 自下往上堆化 while ( parentIndex &gt; 0 &amp;&amp; this.heapArray[currentIndex] &gt; this.heapArray[parentIndex] ) { this.swap(this.heapArray, currentIndex, parentIndex); currentIndex = parentIndex; parentIndex = currentIndex % 2 ? (currentIndex - 1) / 2 : currentIndex / 2; // 父节点的索引 } } // 删除堆顶元素 deleteTop(data) { let len = this.heapArray.length; if (len &lt;= 2) return this.heapArray; /**最后一个与第一个元素互换位置 * 再自顶而下堆化 */ this.swap(this.heapArray, 1, len - 1); this.heapArray.pop(); let i = 1; while ( i * 2 &lt; this.heapArray.length &amp;&amp; this.heapArray[i] &lt; this.heapArray[i * 2] ) { this.swap(this.heapArray, i, i * 2); i = i * 2; } } scan() { return this.heapArray; } swap(arr, i, j) { let tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } } class Heap2 { constructor(capacity) { this.arr = new Array(capacity + 1); // 数组下标从1开始 this.n = capacity; // 堆可以存储的最大数据个数 this.count = 0; // 堆中已存储的数据个数 } // 建堆 static buildHeap(arr) { if (!Array.isArray(arr)) return; let n = arr.length - 1; // 堆元素个数 // 从第i个节点开始从上往下堆化，子节点不需要比较，所以向下取整 let i = Math.floor(n / 2); for (; i &gt;= 1; --i) { Heap2.heapify(arr, n, i); } return arr; } static heapify(arr, n, i) { while (true) { let maxPox = i; // 左子节点比父节点大 if (i * 2 &lt;= n &amp;&amp; arr[i] &lt; arr[i * 2]) maxPox = i * 2; // 右节点比左节点大 if (i * 2 + 1 &lt;= n &amp;&amp; arr[maxPox] &lt; arr[i * 2 + 1]) maxPox = i * 2 + 1; if (maxPox === i) break; // 交互父子节点 Heap2.swap(arr, i, maxPox); i = maxPox; } } insert(data) { if (this.count &gt;= this.n) return; // 堆满了 this.count++; this.arr[this.count] = data; let i = this.count; // 自下而上堆化 while (i / 2 &gt; 0 &amp;&amp; this.arr[i] &gt; this.arr[i / 2]) { this.swap(this.arr, i, i / 2); i = i / 2; } } static deleteTop(arr) { if (arr.length &lt;= 1) return; Heap2.swap(arr, 1, arr.length - 1); let result = arr.pop(); let i = 1; while (true) { let maxPox = i; // 左节点 if (i * 2 &lt; arr.length &amp;&amp; arr[i] &lt; arr[i * 2]) maxPox = i * 2; if (i * 2 + 1 &lt; arr.length &amp;&amp; arr[maxPox] &lt; arr[i * 2 + 1]) maxPox = i * 2 + 1; if (maxPox === i) break; Heap2.swap(arr, i, maxPox); i = maxPox; } return result; } scan() { return this.arr; } static swap(arr, i, j) { let tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } swap(arr, i, j) { let tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } // 堆排序 static sort(arr) { let i = arr.length - 1; // 排序的索引 let result = new Array(arr.length); for (; i &gt;= 1; i--) { let maxValue = Heap2.deleteTop(arr); result[i] = maxValue; } return result; } } // let heap2 = new Heap(heap); // heap2.insert(22); // heap2.insert(23); // console.log(heap2.scan()); // heap2.deleteTop(); // heap2.deleteTop(); // console.log(heap2.scan()); // let heap3 = new Heap([], 5); // heap3.insert(23); // heap3.insert(27); // heap3.insert(33); // heap3.insert(45); // heap3.insert(22); // console.log(heap3.scan()); // heap3.deleteTop(); // console.log(heap3.scan()); // let heap4 = new Heap2(5); // heap4.insert(33); // heap4.insert(23); // heap4.insert(45); // heap4.insert(22); // heap4.insert(7); // console.log(heap4.scan()); let arr1 = [, 3, 44, 23, 18, 39, 26, 77]; let arr2 = [...arr1]; let arr1Heap = Heap2.buildHeap(arr2); console.log(\\"arr1\\", arr1); console.log(\\"arr1Heap\\", arr1Heap); console.log(\\"heapSort\\", Heap2.sort(arr1Heap));"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T12:09:28.000Z"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"algo"}],["meta",{"property":"article:tag","content":"Heap"}],["meta",{"property":"article:tag","content":"排序"}],["meta",{"property":"article:published_time","content":"2020-03-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T12:09:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"28堆和堆排序\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-03-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-15T12:09:28.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"堆和堆排序：为什么说堆排序没有快速排序快？","slug":"堆和堆排序-为什么说堆排序没有快速排序快","link":"#堆和堆排序-为什么说堆排序没有快速排序快","children":[]},{"level":2,"title":"堆的应用：如何快速渠道Top10最热门的搜索关键词","slug":"堆的应用-如何快速渠道top10最热门的搜索关键词","link":"#堆的应用-如何快速渠道top10最热门的搜索关键词","children":[]}],"git":{"createdTime":1678882168000,"updatedTime":1678882168000,"contributors":[{"name":"hotsuitor","email":"hotsuitor@qq.com","commits":1}]},"readingTime":{"minutes":0.45,"words":135},"filePathRelative":"posts/algo/28堆和堆排序/README.md","localizedDate":"2020年3月10日","excerpt":"<h2> 堆和堆排序：为什么说堆排序没有快速排序快？</h2>\\n<p>堆：</p>\\n<ul>\\n<li>堆是一个完全二叉树;</li>\\n<li>堆中的每一个节点的值都必须大于等于（或小于等于）其子树中每个节点的值。\\n大顶堆，根节点最大\\n小顶堆，跟节点最小</li>\\n</ul>\\n<h2> 堆的应用：如何快速渠道Top10最热门的搜索关键词</h2>\\n<ul>\\n<li>优先级队列</li>\\n<li>求Top K</li>\\n<li>求中位数</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">/*\\n * @Author: HotSuitor\\n * @Date: 2020-03-19 16:01:22\\n * @LastEditors: hs\\n * @LastEditTime: 2020-03-19 22:44:45\\n * @Description: hotsuitor@qq.com\\n */</span>\\n<span class=\\"token comment\\">// 堆</span>\\n<span class=\\"token keyword\\">const</span> heap <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">undefined</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">33</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">27</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">21</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">16</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">13</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">15</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">9</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">7</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Heap</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arr<span class=\\"token punctuation\\">,</span> size</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray <span class=\\"token operator\\">=</span> arr <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size <span class=\\"token operator\\">=</span> size <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">||</span> <span class=\\"token number\\">300</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 根节点索引=1,左子节点=2*i,右子节点=2*i+1, i=层数</span>\\n  <span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">data</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> len <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>len <span class=\\"token operator\\">&gt;=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"堆满了\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 堆满了</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>len <span class=\\"token operator\\">===</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">splice</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">undefined</span><span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> currentIndex <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> i<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 层数,从0开始</span>\\n    <span class=\\"token keyword\\">let</span> parentIndex<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//! 奇数-&gt;跟、右节点，偶数-&gt;左节点</span>\\n    parentIndex <span class=\\"token operator\\">=</span> currentIndex <span class=\\"token operator\\">%</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">?</span> <span class=\\"token punctuation\\">(</span>currentIndex <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">:</span> currentIndex <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 父节点的索引</span>\\n    <span class=\\"token comment\\">// 自下往上堆化</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>\\n      parentIndex <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">[</span>currentIndex<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">[</span>parentIndex<span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">,</span> currentIndex<span class=\\"token punctuation\\">,</span> parentIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      currentIndex <span class=\\"token operator\\">=</span> parentIndex<span class=\\"token punctuation\\">;</span>\\n      parentIndex <span class=\\"token operator\\">=</span>\\n        currentIndex <span class=\\"token operator\\">%</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">?</span> <span class=\\"token punctuation\\">(</span>currentIndex <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">:</span> currentIndex <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 父节点的索引</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 删除堆顶元素</span>\\n  <span class=\\"token function\\">deleteTop</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">data</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> len <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>len <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token doc-comment comment\\">/**最后一个与第一个元素互换位置\\n     * 再自顶而下堆化\\n     */</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> len <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>\\n      i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">&lt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">&amp;&amp;</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">[</span>i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      i <span class=\\"token operator\\">=</span> i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">scan</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>heapArray<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arr<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> j</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> tmp <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> tmp<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Heap2</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">capacity</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>arr <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Array</span><span class=\\"token punctuation\\">(</span>capacity <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 数组下标从1开始</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>n <span class=\\"token operator\\">=</span> capacity<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 堆可以存储的最大数据个数</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>count <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 堆中已存储的数据个数</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 建堆</span>\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token function\\">buildHeap</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arr</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>Array<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isArray</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> n <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 堆元素个数</span>\\n    <span class=\\"token comment\\">// 从第i个节点开始从上往下堆化，子节点不需要比较，所以向下取整</span>\\n    <span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">floor</span><span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">--</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      Heap2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">heapify</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">,</span> n<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> arr<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token function\\">heapify</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arr<span class=\\"token punctuation\\">,</span> n<span class=\\"token punctuation\\">,</span> i</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">let</span> maxPox <span class=\\"token operator\\">=</span> i<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token comment\\">// 左子节点比父节点大</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">&lt;=</span> n <span class=\\"token operator\\">&amp;&amp;</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> arr<span class=\\"token punctuation\\">[</span>i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> maxPox <span class=\\"token operator\\">=</span> i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token comment\\">// 右节点比左节点大</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">&lt;=</span> n <span class=\\"token operator\\">&amp;&amp;</span> arr<span class=\\"token punctuation\\">[</span>maxPox<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> arr<span class=\\"token punctuation\\">[</span>i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> maxPox <span class=\\"token operator\\">=</span> i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>maxPox <span class=\\"token operator\\">===</span> i<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token comment\\">// 交互父子节点</span>\\n      Heap2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> maxPox<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      i <span class=\\"token operator\\">=</span> maxPox<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">data</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>count <span class=\\"token operator\\">&gt;=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>n<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 堆满了</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>count<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>arr<span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>count<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>count<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 自下而上堆化</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>arr<span class=\\"token punctuation\\">[</span>i <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>arr<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> i <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      i <span class=\\"token operator\\">=</span> i <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token function\\">deleteTop</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arr</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    Heap2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> result <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">let</span> maxPox <span class=\\"token operator\\">=</span> i<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token comment\\">// 左节点</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">&lt;</span> arr<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">&amp;&amp;</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> arr<span class=\\"token punctuation\\">[</span>i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> maxPox <span class=\\"token operator\\">=</span> i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">&lt;</span> arr<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">&amp;&amp;</span> arr<span class=\\"token punctuation\\">[</span>maxPox<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> arr<span class=\\"token punctuation\\">[</span>i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n        maxPox <span class=\\"token operator\\">=</span> i <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>maxPox <span class=\\"token operator\\">===</span> i<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n      Heap2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> maxPox<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      i <span class=\\"token operator\\">=</span> maxPox<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">scan</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>arr<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arr<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> j</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> tmp <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> tmp<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arr<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> j</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> tmp <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> tmp<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 堆排序</span>\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arr</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 排序的索引</span>\\n    <span class=\\"token keyword\\">let</span> result <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Array</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">let</span> maxValue <span class=\\"token operator\\">=</span> Heap2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">deleteTop</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      result<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> maxValue<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// let heap2 = new Heap(heap);</span>\\n<span class=\\"token comment\\">// heap2.insert(22);</span>\\n<span class=\\"token comment\\">// heap2.insert(23);</span>\\n<span class=\\"token comment\\">// console.log(heap2.scan());</span>\\n<span class=\\"token comment\\">// heap2.deleteTop();</span>\\n<span class=\\"token comment\\">// heap2.deleteTop();</span>\\n<span class=\\"token comment\\">// console.log(heap2.scan());</span>\\n\\n<span class=\\"token comment\\">// let heap3 = new Heap([], 5);</span>\\n<span class=\\"token comment\\">// heap3.insert(23);</span>\\n<span class=\\"token comment\\">// heap3.insert(27);</span>\\n<span class=\\"token comment\\">// heap3.insert(33);</span>\\n<span class=\\"token comment\\">// heap3.insert(45);</span>\\n<span class=\\"token comment\\">// heap3.insert(22);</span>\\n<span class=\\"token comment\\">// console.log(heap3.scan());</span>\\n<span class=\\"token comment\\">// heap3.deleteTop();</span>\\n<span class=\\"token comment\\">// console.log(heap3.scan());</span>\\n\\n<span class=\\"token comment\\">// let heap4 = new Heap2(5);</span>\\n<span class=\\"token comment\\">// heap4.insert(33);</span>\\n<span class=\\"token comment\\">// heap4.insert(23);</span>\\n<span class=\\"token comment\\">// heap4.insert(45);</span>\\n<span class=\\"token comment\\">// heap4.insert(22);</span>\\n<span class=\\"token comment\\">// heap4.insert(7);</span>\\n<span class=\\"token comment\\">// console.log(heap4.scan());</span>\\n\\n<span class=\\"token keyword\\">let</span> arr1 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">44</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">23</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">39</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">26</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">77</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> arr2 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">...</span>arr1<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> arr1Heap <span class=\\"token operator\\">=</span> Heap2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">buildHeap</span><span class=\\"token punctuation\\">(</span>arr2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"arr1\\"</span><span class=\\"token punctuation\\">,</span> arr1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"arr1Heap\\"</span><span class=\\"token punctuation\\">,</span> arr1Heap<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"heapSort\\"</span><span class=\\"token punctuation\\">,</span> Heap2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span>arr1Heap<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
